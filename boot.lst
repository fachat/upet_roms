
boot.a65


    2 A:1000                                    ; The first block of this is loaded by the IPL from the SPI Flash chip into the uppermost
    3 A:1000                                    ; 256 bytes of RAM in bank zero, where the CPU boots from.
    4 A:1000                                    ; This boot block then copies the last 2k of this to $8800 on bank0, and jumps
    5 A:1000                                    ; to it to execute it.
    6 A:1000                                    ; 
    7 A:1000                                    ; Note that this relies on the Flash ROM containing the
    8 A:1000                                    ; PET ROM images to copy from in this order:
    9 A:1000                                    ;
   10 A:1000                                    ; $00000  IPL code (256 byte)
   11 A:1000                                    ; $00100  Boot code (2k+6*256) - this code
   12 A:1000                                    ; $00F00  USB BASIC 4 ROM patch code (usbcomp)
   13 A:1000                                    ; $01000  @MON (4k copied to $a000)
   14 A:1000                                    ; $02000  charrom (8k)
   15 A:1000                                    ; $04000  BASIC1 + EDIT1 + KERNEL1 (16k)
   16 A:1000                                    ; $08000  BASIC2 + EDIT2 + KERNEL2 (16k)
   17 A:1000                                    ; $0c000  BASIC4 (12k)
   18 A:1000                                    ; $0f000  KERNEL4 (12k)
   19 A:1000                                    ; $10000  EDIT4 (extended, PET kbd)
   20 A:1000                                    ; $11000  EDIT4 (extended, C64 kbd)
   21 A:1000                                    ; $12000  EDIT8 (extended, PET kbd)
   22 A:1000                                    ; $13000  EDIT8 (extended, C64 kbd)
   23 A:1000                                    ; $14000  EDIT4 (orig, PET kbd)
   24 A:1000                                    ; $15000  EDIT4 (sjg base, C64 kbd, experimental)
   25 A:1000                                    ; $16000  EDIT8 (orig)
   26 A:1000                                    ; $17000  EDIT8 (sjg base, C64 kbd, experimental)
   27 A:1000                                    ; $18000  charrom for BASIC1 (8k)
   28 A:1000                                    ; $1a000  USB code (8k) to be run in bank 7 (usbcode)
   29 A:1000                                    ; $1c000  SD-Card DOS (16k) to be run in bank 7

viccy.i65


    5 A:1000                                    VCCY_HDISP=1
    6 A:1000                                    VCCY_HDISP_MM=5
    7 A:1000                                    VCCY_VDISP=6
    8 A:1000                                    VCCY_MODE=8
    9 A:1000                                    VCCY_CHEIGHT=9
   10 A:1000                                    VCCY_CRSR_STRT=10
   11 A:1000                                    VCCY_CRSR_END=11
   12 A:1000                                    VCCY_MEM_STRT_H=12
   13 A:1000                                    VCCY_MEM_STRT_L=13
   14 A:1000                                    VCCY_CRSR_POS_H=14
   15 A:1000                                    VCCY_CRSR_POS_L=15
   16 A:1000                                    VCCY_ATT_STRT_H=20
   17 A:1000                                    VCCY_ATT_STRT_L=21
   18 A:1000                                    VCCY_CHR_HDISP=22
   19 A:1000                                    VCCY_CHR_VDISP=23
   20 A:1000                                    VCCY_VSCRL=24
   21 A:1000                                    VCCY_HSCRL=25
   22 A:1000                                    VCCY_FGBG_COLS=26
   23 A:1000                                    VCCY_ROW_INC=27
   24 A:1000                                    VCCY_CSET_STRT_H=28
   25 A:1000                                    VCCY_ULINE=29
   26 A:1000                                    VCCY_RLINE_L=30
   27 A:1000                                    VCCY_RLINE_H=31
   28 A:1000                                    VCCY_CTRL=32
   29 A:1000                                    VCCY_EXT_BGCOLS=33
   30 A:1000                                    VCCY_BRDR_COL=34
   31 A:1000                                    VCCY_IRQ_CTRL=35
   32 A:1000                                    VCCY_IRQ_STAT=36
   33 A:1000                                    VCCY_SYNC=37
   34 A:1000                                    VCCY_HPOS=38
   35 A:1000                                    VCCY_VPOS=39
   36 A:1000                                    VCCY_ALT1=40
   37 A:1000                                    VCCY_ALT2=41

   39 A:1000                                    VCCY_CTRL_ATTR=%00000001
   40 A:1000                                    VCCY_CTRL_BITMAP=%00000010
   41 A:1000                                    VCCY_CTRL_EXT=%00000100
   42 A:1000                                    VCCY_CTRL_DISPEN=%00010000
   43 A:1000                                    VCCY_CTRL_PALSEL=%00100000
   44 A:1000                                    VCCY_CTRL_REGMAP=%01000000
   45 A:1000                                    VCCY_CTRL_COMPAT=%10000000

   47 A:1000                                    VCCY_SPRT_BASE=42
   48 A:1000                                    VCCY_SPRT_BRDR=43
   49 A:1000                                    VCCY_SPRT_SPRT=44
   50 A:1000                                    VCCY_SPRT_RSTR=45
   51 A:1000                                    VCCY_SPRT_MCOL1=46
   52 A:1000                                    VCCY_SPRT_MCOL2=47

   54 A:1000                                    VCCY_SPRT_BASE_0=48
   55 A:1000                                    VCCY_SPRT_BASE_1=52
   56 A:1000                                    VCCY_SPRT_BASE_2=56
   57 A:1000                                    VCCY_SPRT_BASE_3=60
   58 A:1000                                    VCCY_SPRT_BASE_4=64
   59 A:1000                                    VCCY_SPRT_BASE_5=68
   60 A:1000                                    VCCY_SPRT_BASE_6=72
   61 A:1000                                    VCCY_SPRT_BASE_7=76

   63 A:1000                                    VCCY_SPRT_COL_0=80
   64 A:1000                                    VCCY_SPRT_COL_1=81
   65 A:1000                                    VCCY_SPRT_COL_2=82
   66 A:1000                                    VCCY_SPRT_COL_3=83
   67 A:1000                                    VCCY_SPRT_COL_4=84
   68 A:1000                                    VCCY_SPRT_COL_5=85
   69 A:1000                                    VCCY_SPRT_COL_6=86
   70 A:1000                                    VCCY_SPRT_COL_7=87

   72 A:1000                                    SPRT_XPOS=0
   73 A:1000                                    SPRT_YPOS=1
   74 A:1000                                    SPRT_XYPOS=2
   75 A:1000                                    SPRT_CTRL=3

   77 A:1000                                    SPRT_CTRL_EN=%00000001
   78 A:1000                                    SPRT_CTRL_XEXP=%00000010
   79 A:1000                                    SPRT_CTRL_YEXP=%00000100
   80 A:1000                                    SPRT_CTRL_MCOL=%00001000
   81 A:1000                                    SPRT_CTRL_BGPRIO=%00010000
   82 A:1000                                    SPRT_CTRL_BRPRIO=%00100000
   83 A:1000                                    SPRT_CTRL_DRES=%01000000
   84 A:1000                                    SPRT_CTRL_ALTPAL=%10000000

   86 A:1000                                    VCCY_PAL_BASE=88

tcdefs.i65


   27 A:1000                                    TC_BEL=7           ; ring the bell tone
   28 A:1000                                    TC_BS=8           ; backspace
   29 A:1000                                    TC_HT=9           ; horizontal tab (4 chars)
   30 A:1000                                    TC_LF=10           ; line feed
   31 A:1000                                    TC_VT=11           ; vertical tab
   32 A:1000                                    TC_FF=12           ; form feed (clear scr)
   33 A:1000                                    TC_CR=13           ; carriage return
   34 A:1000                                    TC_ESC=27           ; escape

   36 A:1000                                    ; PET (as USB kbd returns those
   37 A:1000                                    TC_CLFT=$9d           ; cursor left
   38 A:1000                                    TC_CRGT=$1d           ; cursor right
   39 A:1000                                    TC_CUP=$91           ; cursor up
   40 A:1000                                    TC_CDWN=$11           ; cursor down

   42 A:1000                                    ; GeckOS
   43 A:1000                                    ;TC_CLFT    =$80  ; cursor left
   44 A:1000                                    ;TC_CRGT    =$81  ; cursor right
   45 A:1000                                    ;TC_CUP     =$82  ; cursor up
   46 A:1000                                    ;TC_CDWN    =$83  ; cursor down

   48 A:1000                                    TC_HOME=$84           ; cursor home (top left of window)
   49 A:1000                                    TC_CLR=$85           ; clear window (FF)
   50 A:1000                                    TC_DEL=$86           ; delete char under cursor
   51 A:1000                                    TC_INS=$87           ; insert space under cursor
   52 A:1000                                    TC_WLO=$88           ; define cursor pos as top left win corner
   53 A:1000                                    TC_WRU=$89           ; define cursor pos as bottom right win corner
   54 A:1000                                    TC_WCLS=$8a           ; clear window definition
   55 A:1000                                    TC_EOL=$8b           ; move behind last non-space in line
   56 A:1000                                    TC_CLL=$8c           ; clear from cursor to end of line
   57 A:1000                                    TC_DELL=$8d           ; delete line where cursor is
   58 A:1000                                    TC_INSL=$8e           ; insert empty line under cursor

   60 A:1000                                    TC_ECHO=$8f
   61 A:1000                                    TC_NOECHO=$90

   63 A:1000                                    ;TC_CPOS    =$91  ; set cursor pos - next chars are row and col

   65 A:1000                                    TC_ATTR=$92           ; next byte is attribute for display

   67 A:1000                                    TC_FGCOL=$93           ; next byte is foreground colour

   69 A:1000                                    TC_HELP=$9c           ; C128 HELP key
   70 A:1000                                    ;TC_ALT     =$9d  ; C128 ALT key
   71 A:1000                                    TC_NOSCRL=$9e           ; C128 NO SCROLL key

   74 A:1000                                    TC_ATTR_REV=%01000000           ; reverse bit
   75 A:1000                                    TC_ATTR_ULINE=%00100000           ; underline bit (opt. dep. on console)
   76 A:1000                                    TC_ATTR_BLINK=%00010000           ; blink bit (opt. dep. on console)

   78 A:1000                                    TC_COL_BLACK=0           ; blacK
   79 A:1000                                    TC_COL_DGREY=1           ; dark grey
   80 A:1000                                    TC_COL_DBLUE=2           ; dark blue
   81 A:1000                                    TC_COL_LBLUE=3           ; light blue
   82 A:1000                                    TC_COL_DGREEN=4           ; dark green
   83 A:1000                                    TC_COL_LGREEN=5           ; light green
   84 A:1000                                    TC_COL_DCYAN=6           ; dark cyan
   85 A:1000                                    TC_COL_LCYAN=7           ; light cyan
   86 A:1000                                    TC_COL_DRED=8           ; dark red
   87 A:1000                                    TC_COL_LRED=9           ; light red
   88 A:1000                                    TC_COL_DPURPLE=10           ; dark purple
   89 A:1000                                    TC_COL_LPURPLE=11           ; light purple
   90 A:1000                                    TC_COL_BROWN=12           ; brown
   91 A:1000                                    TC_COL_YELLOW=13           ; yellow
   92 A:1000                                    TC_COL_LGREY=14           ; light grey
   93 A:1000                                    TC_COL_WHITE=15           ; white

   95 A:1000                                    TC_COL_DEFAULT=128           ; default color

boot.a65


   34 A:1000                                    VBANK=$080000

   36 A:1000                                    SPICTRL=$e808
   37 A:1000                                    SPIDATA=$e809
   38 A:1000                                    SPIPEEK=$e80a
   39 A:1000                                    SPIOFF=$07

   41 A:1000                                    VICCY_IRQ=0           ; set to 1 to use rasterline instead of VDRIVE ints during boot

   43 A:1000                                    PIA1=$e810
   44 A:1000                                    PIA2=$e820
   45 A:1000                                    PIA_PA=0
   46 A:1000                                    PIA_CRA=1
   47 A:1000                                    PIA_PB=2
   48 A:1000                                    PIA_CRB=3

   50 A:1000                                    VIA=$e840
   51 A:1000                                    VIA_PCR=12
   52 A:1000                                    VIA_IER=14

   54 A:1000                                    DAC=$e830
   55 A:1000                                    DAC_CTRL=15

   57 A:1000                                    VICCY=$e880

   59 A:1000                                    RUNADDR=$9000

   61 A:1000                                    shift=$87ff
   62 A:1000                                    char=$87fe
   63 A:1000                                    opt=$87fd
   64 A:1000                                    optkbd=$87fc
   65 A:1000                                    lastopt=$87fb

   67 A:1000                                    opt0=$87f8
   68 A:1000                                    opt1=$87f7
   69 A:1000                                    opt2=$87f6
   70 A:1000                                    optu=$87f5

   72 A:1000                                    VCTRL=$e800
   73 A:1000                                    MCTRL=$e801
   74 A:1000                                    BANK=$e802
   75 A:1000                                    SPEED=$e803
   76 A:1000                                    BUSWIN=$e804
   77 A:1000                                    VMAP=$e805

   79 A:1000                                    R8296=$fff0

   81 A:1000                                    VIDBLK=2           ; video block address for BANK

   83 A:1000                                    ;BOOTCOL =$15 ; dark grey background, light green text
   84 A:1000                                    ;BOOTCOL =$1f ; dark grey background, white text
   85 A:1000                                    BOOTCOL=$05           ; black background with light green text

   87 A:1000                                    BRDCOL=0           ; border colour = black

   89 A:1000                                    ; temporary fix for a (potential) issue in xa2.4.1 when a
   90 A:1000                                    ; 24 bit value is used before it is defined
   91 A:1000                                    lock=$0700ff           ; last byte in zeropage in bank 7/block 14
   92 A:1000                                    VCOUNT=$0700fe
   93 A:1000                                    ;tmp  =$0700fd

   95 A:1000                                    ; ------------------------
   96 A:1000                                    ; this is the actual boot code, 
   97 A:1000                                    ; loaded from Flash via SPI to $9000 by above ipl code

   99 A:1000                                     *= RUNADDR
  100 A:9000                           jmpboot   
  101 A:9000                                     .( 

  103 A:9000                                    ; code runs in .xs/.as
  104 A:9000  e2 30                              sep #%00110000
  105 A:9002                                     .xs 
  106 A:9002                                     .as 

  108 A:9002                                    ; -----------------------
  109 A:9002                                    ; warm reboot init
  110 A:9002  78                                 sei 

  112 A:9003                                    ; init control registers
  113 A:9003  a9 00                              lda #0
  114 A:9005  8d 00 e8                           sta VCTRL                ; $e800 - default to 40 column
  115 A:9008  8d 01 e8                           sta MCTRL                ; $e801
  116 A:900b  8d 02 e8                           sta BANK                ; $e802
  117 A:900e  8d 03 e8                           sta SPEED                ; $e803 - 1MHz
  118 A:9011  8d 04 e8                           sta BUSWIN                ; $e804

  120 A:9014  a9 02                              lda #VIDBLK               ; for the PET default VICCY base address of $1000
  121 A:9016  8d 05 e8                           sta VMAP

  123 A:9019                                    ; init the VICCY emulation (also disables Viccy interrupts)
  124 A:9019  20 1a 91                           jsr setviccy_xs

  126 A:901c                                    ; disable PIA/VIA/DAC interrupt sources
  127 A:901c  a9 00                              lda #0
  128 A:901e  8d 11 e8                           sta PIA1+PIA_CRA
  129 A:9021  8d 13 e8                           sta PIA1+PIA_CRB
  130 A:9024  8d 21 e8                           sta PIA2+PIA_CRA
  131 A:9027  8d 23 e8                           sta PIA2+PIA_CRB
  132 A:902a  a9 7f                              lda #127
  133 A:902c  8d 4e e8                           sta VIA+VIA_IER

  135 A:902f  a9 00                              lda #0
  136 A:9031  8d 3f e8                           sta DAC+DAC_CTRL

  138 A:9034                                    ; uppercase char
  139 A:9034  a9 0c                              lda #12
  140 A:9036  8d 4c e8                           sta VIA+VIA_PCR

  142 A:9039                                    ; -----------------------
  143 A:9039                                    ; switch Ethernet - if exists - to low power mode
  144 A:9039  a9 04                              lda #4             ; ENC28J60 ethernet module
  145 A:903b  8d 08 e8                           sta SPICTRL
  146 A:903e  a9 5e                              lda #%01011110             ; write control register ECON2
  147 A:9040  8d 09 e8                           sta SPIDATA
  148 A:9043  a9 28                              lda #%00101000             ; set PWRSV and VRPS
  149 A:9045  8d 09 e8                           sta SPIDATA
  150 A:9048  a9 07                              lda #SPIOFF
  151 A:904a  8d 08 e8                           sta SPICTRL

  153 A:904d                                    ; set X/Y registers to 16 bit ... 
  154 A:904d  c2 10                              rep #%00010000
  155 A:904f                                    ; ... and tell the assembler about it 
  156 A:904f                                     .xl 

  158 A:904f                                    ; -----------------------
  159 A:904f                                    ; copy over charrom to RAM
  160 A:904f                                    ; $2000-$3fff in flash img

  162 A:904f                                     .( 
  163 A:904f  a9 20                              lda #$20
  164 A:9051  a2 00 c0                           ldx #$c000
  165 A:9054  a0 00 20                           ldy #$2000
  166 A:9057  20 d9 90                           jsr flash2direct_xl
  167 A:905a                                    ; now copy from bank 0 to target location
  168 A:905a  a2 00 00                           ldx #0
  169 A:905d                           copy      
  170 A:905d  bd 00 c0                           lda $c000,x            ; location in test ROM bank
  171 A:9060  9f 00 00 08                        sta VBANK,x              ; location in RAM - uppermost RAM bank
  172 A:9064  e8                                 inx 
  173 A:9065  e0 00 20                           cpx #$2000
  174 A:9068  d0 f3                              bne copy
  175 A:906a                                     .) 

  177 A:906a                                    ;----------------------------------------------------

  179 A:906a  20 29 a8                           jsr irq_install

  181 A:906d  20 84 91                           jsr clrscreen_xl

  183 A:9070  20 13 a8                           jsr setup_sdcard_xl

  185 A:9073  20 68 a7                           jsr setup_usb_xl

  187 A:9076  58                                 cli 

  189 A:9077  20 7d 97                           jsr do_options_init_xl

  191 A:907a  a9 00                              lda #0
  192 A:907c  8d fc 87                           sta optkbd
  193 A:907f                           mloop     
  194 A:907f  a9 00                              lda #0
  195 A:9081  8d fd 87                           sta opt

  197 A:9084  20 68 91                           jsr do_menu_xl

  199 A:9087  c9 6f                              cmp #"o"
  200 A:9089  d0 0a                              bne doreal

  202 A:908b  20 9b 97                           jsr do_options_xl

  204 A:908e  c9 78                              cmp #"x"
  205 A:9090  d0 03                              bne doreal

  207 A:9092  4c 7f 90                           jmp mloop
  208 A:9095                           doreal    
  209 A:9095                                    ; save config char ("1", "2", ..)
  210 A:9095  48                                 pha 

  212 A:9096  20 d9 a7                           jsr tear_usb                ;usb_uninst

  214 A:9099  20 3f a8                           jsr irq_uninstall

  216 A:909c  68                                 pla 
  217 A:909d                                    ; convert selected boot option to config bits (opt0-2,u)
  218 A:909d  20 89 9f                           jsr conv_char2opt_xl

  220 A:90a0  08                                 php 
  221 A:90a1                                    ; set screen to green-on-black
  222 A:90a1                                    ; before we set mode, as 8296 disables col mem access
  223 A:90a1  20 bd 97                           jsr boot_col
  224 A:90a4  20 90 91                           jsr setcol_xl
  225 A:90a7  28                                 plp 

  227 A:90a8                                    ; not found - something bad
  228 A:90a8  b0 03                              bcs foundopt
  229 A:90aa  4c 00 90                           jmp jmpboot
  230 A:90ad                           foundopt  

  232 A:90ad                                    ; ----------------------------                                        
  233 A:90ad                                    ; In: AC has key in ASCII                                             
  234 A:90ad                                    ;                                                                     
  235 A:90ad                                    ; out:  c=0:    no option                                             
  236 A:90ad                                    ;       c=1:    result is in AC:                                      
  237 A:90ad                                    ; bit 7   - if set, unpatched                                         
  238 A:90ad                                    ; bit 6   - 1=80 cols                                                 
  239 A:90ad                                    ; bit 5   - 1=C64                                                     
  240 A:90ad                                    ; bit 4   - 1=8296 ext.                                               
  241 A:90ad                                    ; bit 3   - USB kbd support (only BASIC4, only w/ option from USB)    
  242 A:90ad                                    ; bit 1/0 - model (01=basic1, 10=basic2, 11=basic4)                   

  244 A:90ad                                    ;----------------------------------------------------
  245 A:90ad                                    ; 1= Basic1, 2=Basic2, 3=Basic4
  246 A:90ad  ad f8 87                           lda opt0
  247 A:90b0  29 03                              and #%00000011             ; ROM version

  249 A:90b2  c9 01                              cmp #1
  250 A:90b4  d0 03                              bne not_b1

  252 A:90b6  4c 60 a0                           jmp setup_basic1_xl

  254 A:90b9                                    ;------------------------
  255 A:90b9  c9 02                    not_b1    cmp #2
  256 A:90bb  d0 03                              bne not_b2

  258 A:90bd  4c c2 a1                           jmp setup_basic2_xl

  260 A:90c0                                    ;----------------------------------------------------
  261 A:90c0                           not_b2                     ; only basic 4 left
  262 A:90c0                                    ;----------------------------------------------------

  264 A:90c0  4c d2 a1                           jmp setup_basic4_xl

  266 A:90c3                                    ; -----------------------
  267 A:90c3                                    ; switch back to emulation mode
  268 A:90c3                           end       
  269 A:90c3  8d 01 e8                           sta MCTRL

  271 A:90c6                                    ; set X/Y registers to 8 bit ...
  272 A:90c6  e2 10                              sep #%00010000
  273 A:90c8                                    ; ... and tell the assembler about it
  274 A:90c8                                     .xs 

  276 A:90c8  ad f5 87                           lda optu
  277 A:90cb  4a                                 lsr 
  278 A:90cc  4a                                 lsr 
  279 A:90cd  4a                                 lsr 
  280 A:90ce  4a                                 lsr 
  281 A:90cf  4a                                 lsr 
  282 A:90d0  4a                                 lsr 
  283 A:90d1  8d 03 e8                           sta SPEED

  285 A:90d4                                    ; switch to native mode
  286 A:90d4  38                                 sec 
  287 A:90d5  fb                                 xce 

  289 A:90d6  6c fc ff                           jmp ($fffc)            ; RESET vector

  291 A:90d9                                    ; ----------------------------
  292 A:90d9                                    ; copy an area from flash to bank 0 RAM

  294 A:90d9                                     .xl 
  295 A:90d9                                    ; AC = page in Flash (8bit -> A8-15)
  296 A:90d9                                    ; XR = start in bank 0 (16bit)
  297 A:90d9                                    ; YR = number of bytes (16 bit)
  298 A:90d9                                    ; flash bank 0
  299 A:90d9                           flash2direct_xl 
  300 A:90d9  48                                 pha 
  301 A:90da  a9 00                              lda #0
  302 A:90dc  f0 08                              beq doflash
  303 A:90de                                    ; flash bank 1
  304 A:90de                           flash2direct2_xl 
  305 A:90de  48                                 pha 
  306 A:90df  a9 01                              lda #1             ; second 64k in Flash
  307 A:90e1  d0 03                              bne doflash
  308 A:90e3                           flash2direct3_xl 
  309 A:90e3  48                                 pha 
  310 A:90e4  a9 02                              lda #2
  311 A:90e6                           doflash   
  312 A:90e6                                    ; C is A16 for address in Flash
  313 A:90e6                                     .( 
  314 A:90e6  48                                 pha 
  315 A:90e7  a9 01                              lda #1
  316 A:90e9  8d 08 e8                           sta SPICTRL                ; enable Flash
  317 A:90ec  a9 03                              lda #3
  318 A:90ee  8d 09 e8                           sta SPIDATA                ; READ command
  319 A:90f1  68                                 pla 
  320 A:90f2  8d 09 e8                           sta SPIDATA                ; bits 23-16
  321 A:90f5  68                                 pla 
  322 A:90f6  8d 09 e8                           sta SPIDATA                ; bits 15-8
  323 A:90f9  a9 00                              lda #0
  324 A:90fb  8d 09 e8                           sta SPIDATA                ; bits 7-0

  326 A:90fe  ad 09 e8                           lda SPIDATA                ; trigger shift in of first byte into SR (value read is still invalid)

  328 A:9101                           readloop  
  329 A:9101  ad 09 e8                           lda SPIDATA                ; read byte, trigger shift in of next byte
  330 A:9104  e0 00 e8                           cpx #$e800             ; skip I/O window
  331 A:9107  90 05                              bcc ok
  332 A:9109  e0 00 e9                           cpx #$e900
  333 A:910c  90 02                              bcc nok
  334 A:910e  95 00                    ok        sta 0,x
  335 A:9110  e8                       nok       inx 
  336 A:9111  88                                 dey 
  337 A:9112  d0 ed                              bne readloop

  339 A:9114  a9 07                              lda #SPIOFF
  340 A:9116  8d 08 e8                           sta SPICTRL                ; deselect Flash
  341 A:9119  60                                 rts 
  342 A:911a                                     .) 

  345 A:911a                                     .( 
  346 A:911a                                    ; set Viccy registers
  347 A:911a                                    ; note: stored backwards, so alt/compat modes are set
  348 A:911a                                    ; before affected registers are written to
  349 A:911a                                     .xs 
  350 A:911a                           setviccy_xs .( 
  351 A:911a  a0 29                              ldy #41
  352 A:911c  8c 80 e8                           sty VICCY                ; register number
  353 A:911f  b9 3e 91                 l0        lda vdctab,y
  354 A:9122  8c 80 e8                           sty VICCY
  355 A:9125  8d 81 e8                           sta VICCY+1          ; register value w/ auto-inc of register number
  356 A:9128  88                       lx        dey 
  357 A:9129  10 f4                              bpl l0

  359 A:912b                                    ; disable sprites
  360 A:912b  a2 08                              ldx #8
  361 A:912d  a0 00                              ldy #0
  362 A:912f  a9 33                              lda #51
  363 A:9131  8d 80 e8                 sl        sta VICCY
  364 A:9134  8c 81 e8                           sty VICCY+1
  365 A:9137  18                                 clc 
  366 A:9138  69 04                              adc #4
  367 A:913a  ca                                 dex 
  368 A:913b  d0 f4                              bne sl
  369 A:913d  60                                 rts 

  371 A:913e  00                       vdctab    .byt 0           ; r0 ignored
  372 A:913f  28                                 .byt 40              ; r1 number of chars per line displayed
  373 A:9140  00 00 00 00                        .byt 0,0,0,0; r2-5 ignored
  374 A:9144  19                                 .byt 25              ; r6 char rows displayed
  375 A:9145  00                                 .byt 0              ; r7 ignored
  376 A:9146  00                                 .byt 0              ; r8: b7= 80 col mode; b1=interlace, b0=double
  377 A:9147  07                                 .byt 7              ; r9: rows per char (-1)
  378 A:9148  20                                 .byt 32              ; r10: cursor start (b0-4, b6/5= mode, 00=solid, 01=off, 1x= blink)
  379 A:9149  07                                 .byt 7              ; r11: cursor end line
  380 A:914a  10                                 .byt >$1000             ; r12: start of vid memory high (upet compat -> $9xxx in video bank)
  381 A:914b  00                                 .byt <$1000             ; r13: start of vid memory low (upet compat -> $9xxx in video bank)
  382 A:914c  10                                 .byt >$1000             ; r14: cursor pos high
  383 A:914d  00                                 .byt <$1000             ; r15: cursor pos low
  384 A:914e  00 00 00 00                        .byt 0,0,0,0; r16-r19: ignored
  385 A:9152  d0                                 .byt >$d000             ; r20: start of attribute memory high
  386 A:9153  00                                 .byt <$d000             ; r21: start of attribute memory low
  387 A:9154  09                                 .byt 9              ; r22: number of bits displayed of a char (horizontal)
  388 A:9155  0f                                 .byt 15              ; r23: displayed number of rows per char
  389 A:9156  00                                 .byt 0              ; r24: b0-3 scroll down, b4: up/low border ext, b5 blink rate, b6: reverse
  390 A:9157  00                                 .byt 0              ; r25: b0-3 scroll right, b4: l/r border ext, b6: attrib enable, b7: bitmap mode
  391 A:9158  05                                 .byt BOOTCOL                ; r26: b0-3: bg colour, b4-7: fg colour
  392 A:9159  00                                 .byt 0              ; r27: address incr
  393 A:915a  00                                 .byt >$00             ; r28: char set address high
  394 A:915b  07                                 .byt 7              ; r29: underline scanline
  395 A:915c  00 00                              .byt 0,0        ; r30/31: rasterline counter low/high
  396 A:915e  94                                 .byt 128+4+16  ; r32: b2: extended (cpet compat), b4: disp en, b7: upet compat
  397 A:915f  0f                                 .byt $0f              ; r33: b0-3: bg colour 1, b4-7: bg colour 2
  398 A:9160  00                                 .byt BRDCOL                ; r34: border colour (b0-3)
  399 A:9161  00                                 .byt 0              ; r35: irq control
  400 A:9162  7f                                 .byt 127              ; r36: irq status (clear all sources)
  401 A:9163  00                                 .byt 0              ; r37: v/h sync status (VDC)

  406 A:9164  09                                 .byt 9              ; r38: horizontal position (chars)
  407 A:9165  4f                                 .byt 79              ; r39: vertical position (rasterlines)

  409 A:9166  00                                 .byt 0              ; r40: alt match
  410 A:9167  00                                 .byt 0              ; r41: alt raster row

  412 A:9168                                     .) 

  414 A:9168                                     .) 

  416 A:9168                                    ; ---------------------------------------------------------

boot_menu.a65


    2 A:9168                           do_menu_xl .( 
    3 A:9168  a9 05                              lda #BOOTCOL
    4 A:916a  20 90 91                           jsr setcol_xl
    5 A:916d  20 9a 91                           jsr selecttext_xl
    6 A:9170                                    ; switches to .xs
    7 A:9170  e2 10                              sep #%00010000
    8 A:9172                                     .xs 

   10 A:9172  a9 00                              lda #0
   11 A:9174  8d fd 87                           sta opt

   13 A:9177  ad fd 87                 chkloop   lda opt
   14 A:917a  f0 fb                              beq chkloop

   16 A:917c  c2 10                              rep #%00010000
   17 A:917e                                     .xl 

   19 A:917e  48                                 pha 
   20 A:917f  20 84 91                           jsr clrscreen_xl
   21 A:9182  68                                 pla 
   22 A:9183  60                                 rts 
   23 A:9184                                     .) 

   25 A:9184                                    ; ----------------------------
   26 A:9184                                    ; screen routines
   27 A:9184                                     .( 

   29 A:9184                                    ; back in 16bit land
   30 A:9184                                     .xl 

   32 A:9184                           clrscreen_xl .( 
   33 A:9184  a2 cf 07                           ldx #1999             ; clear full 80 column screen (note $87ff is shift flag)
   34 A:9187  a9 20                              lda #$20
   35 A:9189  9d 00 80                 loop      sta $8000,x
   36 A:918c                                    ;sta VBANK+$9000,x
   37 A:918c  ca                                 dex 
   38 A:918d  10 fa                              bpl loop

   40 A:918f  60                                 rts 
   41 A:9190                                     .) 

   43 A:9190                           setcol_xl .( 
   44 A:9190  a2 cf 07                           ldx #1999             ; clear full 80 column color screen (note $87ff is shift flag)
   45 A:9193  9d 00 88                 cloop     sta $8800,x
   46 A:9196                                    ;sta VBANK+$d000,x
   47 A:9196  ca                                 dex 
   48 A:9197  10 fa                              bpl cloop
   49 A:9199  60                                 rts 
   50 A:919a                                     .) 

   52 A:919a                           selecttext_xl .( 
   53 A:919a  a2 00 00                           ldx #0
   54 A:919d  bd cc 91                 outl      lda text,x
   55 A:91a0  f0 08                              beq endt
   56 A:91a2  29 bf                              and #$bf             ; to PET Screencode
   57 A:91a4  9d 50 80                           sta $8000+2*40,x
   58 A:91a7  e8                                 inx 
   59 A:91a8  d0 f3                              bne outl
   60 A:91aa                           endt      
   61 A:91aa                                    ; signature color bar 
   62 A:91aa                                    ; 5 colours, each 8 chars long
   63 A:91aa                                    ; red = 2
   64 A:91aa                                    ; light red = 3
   65 A:91aa                                    ; blue = 4
   66 A:91aa                                    ; green = 8
   67 A:91aa                                    ; yellow = 12
   68 A:91aa  a0 00 00                           ldy #0
   69 A:91ad  a2 00 00                           ldx #0
   70 A:91b0  38                                 sec 
   71 A:91b1  b9 c7 91                 c0        lda cols,y
   72 A:91b4  9d 00 88                           sta $8800+0*40,x
   73 A:91b7  9d c0 8b                           sta $8800+24*40,x
   74 A:91ba  e8                                 inx 
   75 A:91bb  8a                                 txa 
   76 A:91bc  29 07                              and #%00000111
   77 A:91be  d0 f1                              bne c0
   78 A:91c0  c8                                 iny 
   79 A:91c1  c0 05 00                           cpy #5
   80 A:91c4  90 eb                              bcc c0

   82 A:91c6  60                                 rts 

   84 A:91c7  20 30 40 80 c0           cols      .byt 2<<4,3<<4,4<<4,8<<4,12<<4

   86 A:91cc  20 20 20 20 20 20 20 ... text      .asc "           MICRO-/ULTI-PET              "
   87 A:91f4  20 20 20 20 20 20 20 ...           .asc "            (C) A.FACHAT                "
   88 A:921c  20 20 20 20 20 20 20 ...           .asc "                                        "
   89 A:9244  50 52 45 53 53 20 4b ...           .asc "PRESS KEY FOR BOOT OPTION:              "
   90 A:926c  20 20 20 20 20 20 20 ...           .asc "                                        "
   91 A:9294  2a 20 42 41 53 49 43 ...           .asc "* BASIC ","1"+$80," (NO C64 KBD)                  "
   92 A:92bc  2a 20 42 41 53 49 43 ...           .asc "* BASIC ","2"+$80," (40 COLUMNS, NO C64 KBD)      "
   93 A:92e4  2a 20 42 41 53 49 43 ...           .asc "* BASIC 4, ","4"+$80,"0 COLUMNS                   "
   94 A:930c  2a 20 42 41 53 49 43 ...           .asc "* BASIC 4, ","8"+$80,"0 COLUMNS                   "
   95 A:9334  2a 20 42 41 53 49 43 ...           .asc "* BASIC 4, 829","6"+$80," (80 COLUMNS)            "
   96 A:935c  20 20 20 20 20 20 20 ...           .asc "                                        "
   97 A:9384  20 20 20 20 20 20 20 ...           .asc "                                        "
   98 A:93ac  20 20 20 20 20 20 20 ...           .asc "                                        "
   99 A:93d4  55 53 45 20 4c 45 46 ...           .asc "USE LEFT-SHIFT FOR ALTERNATE SETTINGS   "
  100 A:93fc  55 53 45 20 cf 20 46 ...           .asc "USE ","O"+128," FOR OPTIONS                       "
  101 A:9424  20 20 20 20 20 20 20 ...           .asc "                                        "
  102 A:944c  45 58 50 45 52 49 4d ...           .asc "EXPERIMENTAL USB KBD SUPPORT ON BASIC4  "
  103 A:9474  20 20 20 20 20 20 20 ...           .asc "                                        "
  104 A:949c  45 44 49 54 20 52 4f ...           .asc "EDIT ROMS: SJGRAY   USB: A.FACHAT       "
  105 A:94c4  53 44 2f 46 41 54 33 ...           .asc "SD/FAT32: MIST64, ZEROBYTEORG           "
  106 A:94ec  00                                 .asc 0

  108 A:94ed                                     .) 

  110 A:94ed                                     .) 

boot_kbd.a65


    2 A:94ed                                    ; opt is
    3 A:94ed                                    ; bit 7   - 1=80 cols
    4 A:94ed                                    ; bit 6   - 1=C64
    5 A:94ed                                    ; bit 5   - 1=8296 ext.
    6 A:94ed                                    ; bit 4   - USB kbd support (only BASIC4, only w/ option from USB)
    7 A:94ed                                    ; bit 3   - option menu
    8 A:94ed                                    ; bit 2/1 - model (01=basic1, 10=basic2, 11=basic4) 

   10 A:94ed                                     .xs 

   12 A:94ed                                    ; those are called from the interrupt routine
   13 A:94ed                           key_usb   .( 
   14 A:94ed                                    ;inc $8020
   15 A:94ed  c9 80                              cmp #%10000000
   16 A:94ef  b0 06                              bcs :+
   17 A:94f1  c9 40                              cmp #%01000000
   18 A:94f3  90 02                              bcc :+
   19 A:94f5  09 20                              ora #%00100000
   20 A:94f7  8d fd 87                 :           sta opt
   21 A:94fa  a9 08                              lda #8
   22 A:94fc  0d fc 87                           ora optkbd
   23 A:94ff  8d fc 87                           sta optkbd
   24 A:9502  60                                 rts 
   25 A:9503                                     .) 

   27 A:9503                                    ; AC has 
   28 A:9503                           key_pet   .( 
   29 A:9503  90 18                              bcc nolast
   30 A:9505  20 b0 95                           jsr conv_pet2char
   31 A:9508  90 13                              bcc nolast
   32 A:950a  cd fb 87                           cmp lastopt
   33 A:950d  f0 13                              beq noopt
   34 A:950f  8d fd 87                           sta opt
   35 A:9512  8d fb 87                           sta lastopt
   36 A:9515  98                                 tya 
   37 A:9516  0d fc 87                           ora optkbd
   38 A:9519  8d fc 87                           sta optkbd
   39 A:951c  60                       sameopt   rts 
   40 A:951d  a9 00                    nolast    lda #0
   41 A:951f  8d fb 87                           sta lastopt
   42 A:9522                           noopt                      ;lda #0
   43 A:9522                                    ;sta opt
   44 A:9522  60                                 rts 
   45 A:9523                                     .) 

   47 A:9523                                    ; ----------------------------
   48 A:9523                                    ; check keyboard for input
   49 A:9523                                    ; returns
   50 A:9523                                    ; c=0 - no key pressed
   51 A:9523                                    ; c=1 - key pressed
   52 A:9523                                    ; xr=number of key
   53 A:9523                                    ; ac=shift flag
   54 A:9523                                     .xs 

   56 A:9523                           checkkbd_xs .( 
   57 A:9523  a9 00                              lda #0
   58 A:9525  8d fe 87                           sta char
   59 A:9528  8d ff 87                           sta shift
   60 A:952b                                    ; init
   61 A:952b  a9 38                              lda #$38             ; DDR, CA2 output hi
   62 A:952d  8d 11 e8                           sta PIA1+PIA_CRA            ; $e811
   63 A:9530  a9 0f                              lda #$0f             ; set keybd row select to output
   64 A:9532  8d 10 e8                           sta PIA1+PIA_PA            ; $e810
   65 A:9535  a9 3c                              lda #$3c             ; Port A, CA2 output hi
   66 A:9537  8d 11 e8                           sta PIA1+PIA_CRA            ; $e811
   67 A:953a  a9 38                              lda #$38             ; DDR, CB2 output hi
   68 A:953c  8d 13 e8                           sta PIA1+PIA_CRB            ; $e813
   69 A:953f  a9 00                              lda #0             ; all bits input PB
   70 A:9541  8d 12 e8                           sta PIA1+PIA_PB            ; $e812

   74 A:9544  a9 3d                              lda #$3d             ; Port B, CB2 output hi

   76 A:9546  8d 13 e8                           sta PIA1+PIA_CRB            ; $e813

   78 A:9549                                    ; init scan
   79 A:9549  ad 10 e8                           lda $e810
   80 A:954c  29 f0                              and #$f0

   82 A:954e  8d 10 e8                           sta $e810

   84 A:9551                                    ; scan
   85 A:9551  a2 50                              ldx #$50
   86 A:9553  a0 08                    rloop     ldy #8
   87 A:9555  ad 12 e8                 ioloop    lda $e812
   88 A:9558  cd 12 e8                           cmp $e812
   89 A:955b  d0 f8                              bne ioloop
   90 A:955d  4a                       bloop     lsr 
   91 A:955e  90 16                              bcc gotone
   92 A:9560  ca                       nextr     dex 
   93 A:9561  f0 08                              beq done
   94 A:9563  88                                 dey 
   95 A:9564  d0 f7                              bne bloop
   96 A:9566  ee 10 e8                           inc $e810
   97 A:9569  80 e8                              bra rloop                ; always

   99 A:956b  ae fe 87                 done      ldx char
  100 A:956e  18                                 clc 
  101 A:956f  f0 04                              beq ret
  102 A:9571  ad ff 87                           lda shift
  103 A:9574  38                                 sec                    ; got one
  104 A:9575  60                       ret       rts 

  106 A:9576                           gotone                     ; x has number of key
  107 A:9576                                    ; save AC
  108 A:9576  48                                 pha 
  109 A:9577  ad fc 87                           lda optkbd
  110 A:957a  f0 0d                              beq openshift
  111 A:957c  4a                                 lsr 
  112 A:957d  29 10                              and #%00010000
  113 A:957f  d0 10                              bne c64s
  114 A:9581  90 06                              bcc openshift
  115 A:9583  20 96 95                           jsr shift_petn
  116 A:9586  68                       nextr2    pla 
  117 A:9587  80 d7                              bra nextr
  118 A:9589                           openshift 
  119 A:9589  20 96 95                           jsr shift_petn
  120 A:958c  20 a4 95                           jsr shift_c64x
  121 A:958f  80 f5                              bra nextr2
  122 A:9591                           c64s      
  123 A:9591  20 a0 95                           jsr shift_c64
  124 A:9594  80 f0                              bra nextr2

  126 A:9596                           shift_petn 
  127 A:9596                                    ; PET-N
  128 A:9596  e0 10                              cpx #16             ; left shift (8/0)
  129 A:9598  f0 12                              beq gotshift
  130 A:959a  e0 0b                              cpx #11             ; right shift (8/5) (works, but not on a C64 keybd)
  131 A:959c  f0 0e                              beq gotshift
  132 A:959e  d0 08                              bne gotchar
  133 A:95a0                                    ; C64
  134 A:95a0                           shift_c64 
  135 A:95a0  e0 2a                              cpx #42             ; 3/1 = "R" = Left shift on C64 kbd
  136 A:95a2  f0 08                              beq gotshift64
  137 A:95a4                           shift_c64x 
  138 A:95a4  e0 37                              cpx #55
  139 A:95a6  f0 04                              beq gotshift64
  140 A:95a8                           gotchar   
  141 A:95a8  8e fe 87                           stx char
  142 A:95ab  60                                 rts 
  143 A:95ac                           gotshift64 
  144 A:95ac                           gotshift  
  145 A:95ac  6e ff 87                           ror shift                ; implicit sec after branch from cpx/beq
  146 A:95af  60                                 rts 
  147 A:95b0                                     .) 

  149 A:95b0                                    ;---------------------------------------
  150 A:95b0                                    ; convert checkkbd output to option char
  151 A:95b0                                    ; in: a/x from checkkbd
  152 A:95b0                                    ; out:
  153 A:95b0                                    ; c=0: no option identified
  154 A:95b0                                    ; c=1: option char in AC,
  155 A:95b0                                    ;  YR= kbd flag: 32=C64 kbd, 0=N-type
  156 A:95b0                                    ;
  157 A:95b0                           conv_pet2char .( 
  158 A:95b0  48                                 pha                    ; save shift flag 
  159 A:95b1  ad fc 87                           lda optkbd                ; check detected keyboard
  160 A:95b4  f0 11                              beq openkbd

  162 A:95b6  29 20                              and #%00100000
  163 A:95b8  f0 03                              beq notc64
  164 A:95ba  4c 19 96                           jmp decode_c64
  165 A:95bd                           notc64    
  166 A:95bd  ad fc 87                           lda optkbd
  167 A:95c0  29 01                              and #1
  168 A:95c2  f0 03                              beq openkbd
  169 A:95c4  4c 2b 96                           jmp decode_petn
  170 A:95c7                           openkbd   
  171 A:95c7                                    ; PET N-type keyboard
  172 A:95c7  a0 01                              ldy #1

  174 A:95c9                                    ; key number is (9-row)*8+(7-col)+1 where row/col are from www.6502.org/users/andre/petindex/keymap/petgraph.png
  175 A:95c9  e0 29                              cpx #41             ; 4/7 = "6"
  176 A:95cb  f0 31                              beq is8296
  177 A:95cd  e0 12                              cpx #18             ; 7/6 = "2"
  178 A:95cf  f0 36                              beq is2
  179 A:95d1  e0 2a                              cpx #42             ; 4/6 = "4"
  180 A:95d3  f0 2f                              beq is4
  181 A:95d5  e0 32                              cpx #50             ; 3/6 = "8"
  182 A:95d7  f0 28                              beq is8
  183 A:95d9  e0 1a                              cpx #26             ; 6/6 = "1"
  184 A:95db  f0 2d                              beq is1
  185 A:95dd  e0 39                              cpx #57             ; 2/7 = "9"
  186 A:95df  f0 1a                              beq is9
  187 A:95e1  e0 3c                              cpx #60             ; 2/4 = "o" for options
  188 A:95e3  f0 28                              beq isopt

  190 A:95e5                                    ; C64 keyboard
  191 A:95e5  a0 20                              ldy #32

  193 A:95e7                                    ; derived from https:
  194 A:95e7                                    ; cpx #42  ; 4/6 = "4" = Right shift on C64 - clash with N-type "4"
  195 A:95e7                                    ; beq gotshift
  196 A:95e7  e0 16                              cpx #22             ; 7/2 = "N" = "6" on C64 kbd 
  197 A:95e9  f0 13                              beq is8296
  198 A:95eb                                    ; cpx #24  ; 7/0 = "X" = "2" on C64 kbd - no C64 kbd option
  199 A:95eb                                    ; beq is2
  200 A:95eb  e0 17                              cpx #23             ; 7/1 = "V" = "4" on C64 kbd
  201 A:95ed  f0 15                              beq is4
  202 A:95ef  e0 15                              cpx #21             ; 7/3 = "," = "8" on C64 kbd
  203 A:95f1  f0 0e                              beq is8
  204 A:95f3                                    ; cpx #80  ; 0/0 = "!" = "1" on C64 kbd - no C64 kbd option
  205 A:95f3                                    ; beq is1c64
  206 A:95f3  e0 1c                              cpx #28             ; 6/4 = ";" = "o" on C64 kbd
  207 A:95f5  f0 16                              beq isopt
  208 A:95f7  e0 4c                              cpx #76             ; 0/4 = "(" = "9" on C64 kbd
  209 A:95f9  f0 00                              beq is9
  210 A:95fb                           is9       
  211 A:95fb  68                                 pla                    ; get shift from stack and ignore
  212 A:95fc                           bloopx    
  213 A:95fc  18                                 clc 
  214 A:95fd  60                                 rts 

  216 A:95fe  a2 36                    is8296    ldx #"6"          ;128+32+6
  217 A:9600  2c                                 .byt $2c
  218 A:9601  a2 38                    is8       ldx #"8"          ; 128+6
  219 A:9603  2c                                 .byt $2c
  220 A:9604  a2 34                    is4       ldx #"4"          ; 6
  221 A:9606  2c                                 .byt $2c
  222 A:9607  a2 32                    is2       ldx #"2"          ; 4
  223 A:9609  2c                                 .byt $2c
  224 A:960a  a2 31                    is1       ldx #"1"          ; 2
  225 A:960c  2c                                 .byt $2c
  226 A:960d  a2 6f                    isopt     ldx #"o"
  227 A:960f                           addshift  
  228 A:960f  68                                 pla                    ; restore shift flag
  229 A:9610  10 04                              bpl nosh
  230 A:9612  8a                                 txa                    ; restore option byte
  231 A:9613  09 80                              ora #128
  232 A:9615  aa                                 tax 
  233 A:9616  8a                       nosh      txa 
  234 A:9617  38                                 sec 
  235 A:9618  60                                 rts 

  237 A:9619                           decode_c64 
  238 A:9619  ca                                 dex 
  239 A:961a  68                                 pla 
  240 A:961b  30 07                              bmi dec_shift64
  241 A:961d  bd 3d 96                           lda ktab_c64,x
  242 A:9620  f0 da                              beq bloopx
  243 A:9622  38                                 sec 
  244 A:9623  60                                 rts 
  245 A:9624                           dec_shift64 
  246 A:9624  bd 8d 96                           lda stab_c64,x
  247 A:9627  f0 d3                              beq bloopx
  248 A:9629  38                                 sec 
  249 A:962a  60                                 rts 

  251 A:962b                           decode_petn 
  252 A:962b  ca                                 dex 
  253 A:962c  68                                 pla 
  254 A:962d  30 07                              bmi dec_shiftpet
  255 A:962f  bd dd 96                           lda ktab_petn,x
  256 A:9632  f0 c8                              beq bloopx
  257 A:9634  38                                 sec 
  258 A:9635  60                                 rts 
  259 A:9636                           dec_shiftpet 
  260 A:9636  bd 2d 97                           lda stab_petn,x
  261 A:9639  f0 c1                              beq bloopx
  262 A:963b  38                                 sec 
  263 A:963c  60                                 rts 

  266 A:963d                           ktab_c64  
  267 A:963d  00 00 00 00 00 00 00 00            .asc 0,0,0,0,0,0,0,0
  268 A:9645  00 00 00 00 00 00 00 00            .asc 0,0,0,0,0,0,0,0
  269 A:964d  00 84 2d 30 38 36 34 32            .asc 0,TC_HOME,"-","0","8","6","4","2"
  270 A:9655  00 5e 40 6f 75 74 65 71            .asc 0,"^","@","o","u","t","e","q"
  271 A:965d  00 3d 3a 6b 68 66 73 09            .asc 0,"=",":","k","h","f","s",TC_HT
  272 A:9665  00 01 2e 6d 62 63 7a 20            .asc 0,1,".","m","b","c","z"," "
  273 A:966d  11 2f 2c 6e 76 78 01 03            .asc TC_CDWN,"/",",","n","v","x",1,3
  274 A:9675  1d 3b 6c 6a 67 64 61 02            .asc TC_CRGT,";","l","j","g","d","a",2
  275 A:967d  0d 2a 70 69 79 72 77 7e            .asc TC_CR,"*","p","i","y","r","w","~"
  276 A:9685  08 5c 2b 39 37 35 33 31            .asc TC_BS,"\","+","9","7","5","3","1"

  278 A:968d                           stab_c64  
  279 A:968d  00 00 00 00 00 00 00 00            .asc 0,0,0,0,0,0,0,0
  280 A:9695  00 00 00 00 00 00 00 00            .asc 0,0,0,0,0,0,0,0
  281 A:969d  00 85 2d 30 28 26 24 22            .asc 0,TC_CLR,"-","0","(","&","$","""
  282 A:96a5  00 5e 40 4f 55 54 45 51            .asc 0,"^","@","O","U","T","E","Q"
  283 A:96ad  00 3d 5b 4b 48 46 53 09            .asc 0,"=","[","K","H","F","S",TC_HT
  284 A:96b5  00 01 3e 4d 42 43 5a 20            .asc 0,1,">","M","B","C","Z"," "
  285 A:96bd  91 3f 3c 4e 56 58 01 03            .asc TC_CUP,"?","<","N","V","X",1,3
  286 A:96c5  9d 5d 4c 4a 47 44 41 02            .asc TC_CLFT,"]","L","J","G","D","A",2
  287 A:96cd  0a 2a 50 49 59 52 57 7e            .asc TC_LF,"*","P","I","Y","R","W","~"
  288 A:96d5  87 5c 2b 39 37 35 33 31            .asc TC_INS,"\","+","9","7","5","3","1"

  290 A:96dd                                    ;key number is (9-row)*8+(7-col)+1
  291 A:96dd  3d 2e 00 03 3c 20 5b 09  ktab_petn .asc "=.",0,3,"< [",TC_HT
  292 A:96e5  2d 30 00 3e 00 5d 40 00            .asc "-0",0,">",0,"]@",0
  293 A:96ed  2b 32 00 3f 2c 6e 76 78            .asc "+2",0,"?,nvx"
  294 A:96f5  33 31 0d 3b 6d 62 63 7a            .asc "31",TC_CR,";mbcz"
  295 A:96fd  2a 35 00 3a 6b 68 66 73            .asc "*5",0,":khfs"
  296 A:9705  36 34 00 6c 6a 67 64 61            .asc "64",0,"ljgda"
  297 A:970d  2f 38 00 70 69 79 72 77            .asc "/8",0,"piyrw"
  298 A:9715  39 37 5e 6f 75 74 65 71            .asc "97","^","outeq"
  299 A:971d  08 11 00 29 5c 27 24               .asc TC_BS,TC_CDWN,0,")\'$"
  299 A:9724  22                                 .byt $22
  300 A:9725  1d 84 7e 28 26 25 23 21            .asc TC_CRGT,TC_HOME,"~(&%#!"

  302 A:972d  3d 2e 00 1b 3c 20 7b 09  stab_petn .asc "=.",0,TC_ESC,"< {",TC_HT
  303 A:9735  2d 30 00 3e 00 7d 40 00            .asc "-0",0,">",0,"}@",0
  304 A:973d  2b b2 00 3f 2c 4e 56 58            .asc "+","2"+128,0,"?,NVX"
  305 A:9745  b3 b1 0a 3b 4d 42 43 5a            .asc "3"+128,"1"+128,TC_LF,";MBCZ"
  306 A:974d  2a b5 00 3a 4b 48 46 53            .asc "*","5"+128,0,":KHFS"
  307 A:9755  b6 b4 00 4c 4a 47 44 41            .asc "6"+128,"4"+128,0,"LJGDA"
  308 A:975d  2f b8 00 50 49 59 52 57            .asc "/","8"+128,0,"PIYRW"
  309 A:9765  b9 b7 5e 4f 55 54 45 51            .asc "9"+128,"7"+128,"^","OUTEQ"
  310 A:976d  87 91 00 29 5c 27 24               .asc TC_INS,TC_CUP,0,")\'$"
  310 A:9774  22                                 .byt $22
  311 A:9775  9d 85 7c 28 26 25 23 21            .asc TC_CLFT,TC_CLR,"|(&%#!"

  313 A:977d                                     .) 

  315 A:977d                                     .xl 

boot_opts.a65


    2 A:977d                                     .include "boot_opts.i65"

boot_opts.i65


    3 A:977d                                    OPT0_ORIGEDIT=128
    4 A:977d                                    OPT0_80COL=64
    5 A:977d                                    OPT0_C64KBD=32
    6 A:977d                                    OPT0_8296MAP=16
    7 A:977d                                    OPT0_USBKBD=8
    8 A:977d                                    OPT0_SEL=7

   10 A:977d                                    OPT1_SPEED=128
   11 A:977d                                    OPT1_SPEED_I=0
   12 A:977d                                    OPT1_KERNAL=64
   13 A:977d                                    OPT1_BASIC=32
   14 A:977d                                    OPT1_EDITOR=16
   15 A:977d                                    OPT1_816MON=8
   16 A:977d                                    OPT1_SDCARD=4
   17 A:977d                                    OPT1_SDUNIT=2
   18 A:977d                                    OPT1_SDUNIT_I=6
   19 A:977d                                    OPT1_SIEC=1

   21 A:977d                                    OPT2_UNITOFF_M=128
   22 A:977d                                    OPT2_UNITOFF_I=8

   24 A:977d                                    OPT2_SERA=64
   25 A:977d                                    OPT2_SERB=32
   26 A:977d                                    OPT2_USBHID=16
   27 A:977d                                    OPT2_SCRCOL=8
   28 A:977d                                    OPT2_SCRCOL_I=12

   30 A:977d                                    OPT_MAX_Y_I=13
   31 A:977d                                    OPT_MAX_X_I=12

boot_opts.a65


    4 A:977d                                     .xl 

    6 A:977d                                     .( 

    8 A:977d                                    ; opt0 bits are:
    9 A:977d                                    ; bit 7: 1=orig editor - inverted copy of EDITOR ROM patch bit
   10 A:977d                                    ; bit 6: 1=80 col, 0=40 col
   11 A:977d                                    ; bit 5: 1=c64 kbd, 0=pet-N kbd
   12 A:977d                                    ; bit 4: 1=8296 memory map, 0= normal
   13 A:977d                                    ; bit 3: 1=USB support enabled from keyboard select
   14 A:977d                                    ; 
   15 A:977d                                    ; opts1 bits are:
   16 A:977d                                    ; bit 7: SPEED flag (placeholder)
   17 A:977d                                    ; bit 6: KERNAL enhancements
   18 A:977d                                    ; bit 5: BASIC enhancements
   19 A:977d                                    ; bit 4: new EDITOR (sjg)
   20 A:977d                                    ; bit 3: enable 65816 monitor
   21 A:977d                                    ; bit 2: enable SD-Card support
   22 A:977d                                    ; bit 1: SD unit# flag (placeholder)
   23 A:977d                                    ; bit 0: enable serial IEC support
   24 A:977d                                    ; opts2 bits are:
   25 A:977d                                    ; bit 7: IEC/IEEE prio
   26 A:977d                                    ; bit 6: enable RS232 port A support
   27 A:977d                                    ; bit 5: enable RS232 port B support
   28 A:977d                                    ; bit 4: enable USB support (mouse/kbd)
   29 A:977d                                    ; bit 3: default screen col (placeholder)
   30 A:977d                                    ; optu bits are:
   31 A:977d                                    ; bits 7+6: speed indicator
   32 A:977d                                    ; bits 5+4: default screen col
   33 A:977d                                    ; bits 1+0: unit for SD Card -8

   35 A:977d                                    ; device 5 on SPI bus, mode 0, slow clock
   36 A:977d                                    SPI_SEL_EEPROM=5+8
   37 A:977d                                    SPI_SEL_NONE=7

   39 A:977d                                    ONCHAR=81
   40 A:977d                                    OFFCHAR=46           ;87

   42 A:977d                           do_options_init_xl .( 
   43 A:977d                                    ; switches to .xs
   44 A:977d  e2 10                              sep #%00010000
   45 A:977f                                     .xs 

   47 A:977f  a9 00                              lda #0
   48 A:9781  8d f8 87                           sta opt0
   49 A:9784  8d f7 87                           sta opt1
   50 A:9787  8d f6 87                           sta opt2
   51 A:978a  8d f5 87                           sta optu

   53 A:978d                                    ; detect hardware, set masks
   54 A:978d  20 d5 98                           jsr detect_xs

   56 A:9790  20 d3 97                           jsr load_from_eeprom_xs
   57 A:9793  90 03                              bcc loadok

   59 A:9795  20 c9 98                           jsr load_from_rom_xs
   60 A:9798                           loadok    
   61 A:9798                                    ; switches to .xl
   62 A:9798  c2 10                              rep #%00010000
   63 A:979a                                     .xl 
   64 A:979a  60                                 rts 
   65 A:979b                                     .) 

   67 A:979b                           do_options_xl .( 
   68 A:979b                                    ; clear the screen
   69 A:979b  20 84 91                           jsr clrscreen_xl

   71 A:979e                                    ; display the (empty) options menue
   72 A:979e  20 5f 99                           jsr opttext_xl

   74 A:97a1                                    ; switches to .xs
   75 A:97a1  e2 10                              sep #%00010000
   76 A:97a3                                     .xs 

   78 A:97a3                                    ; display the current options values
   79 A:97a3  20 91 9c                           jsr set_opts_xs

   81 A:97a6  a9 00                    doloop    lda #0
   82 A:97a8  8d fd 87                           sta opt

   84 A:97ab                                    ; wait for keyboard input (from interrupt)
   85 A:97ab  ad fd 87                 chkloop   lda opt
   86 A:97ae  f0 fb                              beq chkloop

   88 A:97b0                                    ; handle keyboard interrupt
   89 A:97b0  20 e8 9d                           jsr do_opt_xs
   90 A:97b3  90 f1                              bcc doloop

   92 A:97b5  c2 10                              rep #%00010000
   93 A:97b7                                     .xl 

   95 A:97b7  48                                 pha 
   96 A:97b8  20 84 91                           jsr clrscreen_xl
   97 A:97bb  68                                 pla 
   98 A:97bc  60                                 rts 
   99 A:97bd                                     .) 

  101 A:97bd                           boot_col  .( 
  102 A:97bd  ad f5 87                           lda optu
  103 A:97c0  29 30                              and #32+16
  104 A:97c2  c9 20                              cmp #32
  105 A:97c4  b0 0a                              bcs white
  106 A:97c6  c9 10                              cmp #16
  107 A:97c8  b0 03                              bcs amber
  108 A:97ca  a9 05                              lda #BOOTCOL
  109 A:97cc  2c                                 .byt $2c
  110 A:97cd  a9 0d                    amber     lda #13
  111 A:97cf  2c                                 .byt $2c
  112 A:97d0  a9 0f                    white     lda #15
  113 A:97d2  60                                 rts 
  114 A:97d3                                     .) 

  116 A:97d3                                    ; ==========================================================
  117 A:97d3                                    ; EEPROM routines
  118 A:97d3                                     .xs 

  120 A:97d3                           load_from_eeprom_xs .( 
  121 A:97d3  08                                 php 
  122 A:97d4  78                                 sei 

  124 A:97d5  a9 07                              lda #SPI_SEL_NONE
  125 A:97d7  8d 08 e8                           sta SPICTRL                ; deselect any device
  126 A:97da  a9 0d                              lda #SPI_SEL_EEPROM               ; slow clock, mode 0
  127 A:97dc  8d 08 e8                           sta SPICTRL                ; select EEPROM/RTC chip

  129 A:97df  a9 03                              lda #3             ; eeprom read
  130 A:97e1  8d 09 e8                           sta SPIDATA
  131 A:97e4  2c 08 e8                 :           bit SPICTRL
  131 A:97e7  30 fb                              bmi :-
  132 A:97e9  a9 00                              lda #0             ; eeprom start of RAM
  133 A:97eb  8d 09 e8                           sta SPIDATA
  134 A:97ee  2c 08 e8                 :           bit SPICTRL
  134 A:97f1  30 fb                              bmi :-
  135 A:97f3  a9 55                              lda #85             ; bogus
  136 A:97f5  8d 09 e8                           sta SPIDATA

  138 A:97f8  a0 00                              ldy #0
  139 A:97fa                           @1        
  140 A:97fa  2c 08 e8                 :           bit SPICTRL
  140 A:97fd  30 fb                              bmi :-
  141 A:97ff  ad 09 e8                           lda SPIDATA                ; read & trigger
  142 A:9802  99 3b a0                           sta opts_vals,y
  143 A:9805                                    ;sta $8028,y

  145 A:9805  c8                                 iny 
  146 A:9806  c0 25                              cpy #opts_vals_end-opts_vals           ; 3 sets of 12 bytes of options, +1 byte checksum
  147 A:9808  90 f0                              bcc @1

  149 A:980a  2c 08 e8                 :           bit SPICTRL
  149 A:980d  30 fb                              bmi :-
  150 A:980f  a9 07                              lda #SPI_SEL_NONE
  151 A:9811  8d 08 e8                           sta SPICTRL                ; deselect

  153 A:9814  20 a9 98                           jsr do_checksum_xs
  154 A:9817  cd 5f a0                           cmp checksum
  155 A:981a  d0 03                              bne mismatch

  157 A:981c  28                                 plp 
  158 A:981d  18                                 clc 
  159 A:981e  60                                 rts 
  160 A:981f                           mismatch  
  161 A:981f  28                                 plp 
  162 A:9820  38                                 sec 
  163 A:9821  60                                 rts 
  164 A:9822                                     .) 

  166 A:9822                           save_to_eeprom_xs .( 

  168 A:9822  20 a9 98                           jsr do_checksum_xs
  169 A:9825  8d 5f a0                           sta checksum

  171 A:9828  08                                 php 
  172 A:9829  78                                 sei 

  174 A:982a  a2 00                              ldx #0             ; byte ind
  175 A:982c                           pageloop  
  176 A:982c  a9 07                              lda #SPI_SEL_NONE
  177 A:982e  8d 08 e8                           sta SPICTRL                ; deselect any device
  178 A:9831  a9 0d                              lda #SPI_SEL_EEPROM
  179 A:9833  8d 08 e8                           sta SPICTRL                ; select EEPROM/RTC chip
  180 A:9836  a9 06                              lda #6             ; enable write latch EEWREN
  181 A:9838  8d 09 e8                           sta SPIDATA
  182 A:983b  2c 08 e8                 :           bit SPICTRL
  183 A:983e  30 fb                              bmi :-
  184 A:9840  a9 07                              lda #SPI_SEL_NONE               ; deselect device (activate latch)
  185 A:9842  8d 08 e8                           sta SPICTRL
  186 A:9845  a9 0d                              lda #SPI_SEL_EEPROM               ; select EEPROM/RTC
  187 A:9847  8d 08 e8                           sta SPICTRL

  189 A:984a  a9 02                              lda #2             ; eeprom write
  190 A:984c  8d 09 e8                           sta SPIDATA
  191 A:984f  2c 08 e8                 :           bit SPICTRL
  192 A:9852  70 fb                              bvs :-
  193 A:9854  8e 09 e8                           stx SPIDATA
  194 A:9857                           byteloop  
  195 A:9857  bd 3b a0                           lda opts_vals,x 
  196 A:985a                                    ;sta $8050,x
  197 A:985a  2c 08 e8                 :           bit SPICTRL
  198 A:985d  70 fb                              bvs :-
  199 A:985f  8d 09 e8                           sta SPIDATA
  200 A:9862  e8                                 inx 

  202 A:9863  e0 25                              cpx #opts_vals_end-opts_vals           ; 3*12+1
  203 A:9865  b0 35                              bcs done

  205 A:9867  8a                                 txa 
  206 A:9868  29 07                              and #7
  207 A:986a  d0 eb                              bne byteloop                ; write 8 bytes

  209 A:986c  2c 08 e8                 :           bit SPICTRL
  210 A:986f  30 fb                              bmi :-
  211 A:9871  a9 07                              lda #SPI_SEL_NONE
  212 A:9873  8d 08 e8                           sta SPICTRL                ; deselect device

  214 A:9876                                    ; read status register loop until write is finished
  215 A:9876  a9 0d                    srloop    lda #SPI_SEL_EEPROM
  216 A:9878  8d 08 e8                           sta SPICTRL
  217 A:987b  a9 05                              lda #5             ; SRREAD
  218 A:987d  8d 09 e8                           sta SPIDATA
  219 A:9880  2c 08 e8                 :           bit SPICTRL
  220 A:9883  70 fb                              bvs :-
  221 A:9885  a9 ff                              lda #$ff
  222 A:9887  8d 09 e8                           sta SPIDATA
  223 A:988a  2c 08 e8                 :           bit SPICTRL
  224 A:988d  30 fb                              bmi :-
  225 A:988f  ad 0a e8                           lda SPIPEEK
  226 A:9892  a0 07                              ldy #SPI_SEL_NONE
  227 A:9894  8c 08 e8                           sty SPICTRL
  228 A:9897  4a                                 lsr 
  229 A:9898  b0 dc                              bcs srloop
  230 A:989a  90 90                              bcc pageloop
  231 A:989c                           done      
  232 A:989c  2c 08 e8                 :           bit SPICTRL
  233 A:989f  30 fb                              bmi :-
  234 A:98a1  a0 07                              ldy #SPI_SEL_NONE
  235 A:98a3  8c 08 e8                           sty SPICTRL

  237 A:98a6  28                                 plp 
  238 A:98a7  18                                 clc 
  239 A:98a8  60                                 rts 
  240 A:98a9                                     .) 

  242 A:98a9                           do_checksum_xs .( 
  243 A:98a9  a9 00                              lda #0
  244 A:98ab  8d 3a a0                           sta checksum_tmp

  246 A:98ae  a0 00                              ldy #0
  247 A:98b0                           byte_crc  
  247 A:98b0                                    
  248 A:98b0  b9 3b a0                           lda opts_vals,y
  249 A:98b3                           init_crc  
  249 A:98b3                                    
  250 A:98b3                                    ; from https:
  251 A:98b3  a2 08                              ldx #8             ; initialize x-register with the # of bits to be shifted
  252 A:98b5  4d 3a a0                           eor checksum_tmp                ; X-OR new byte with contents of memory location CRC in order to obtain (remainder + next incoming byte)
  253 A:98b8                           crc_loop  
  253 A:98b8                                    
  254 A:98b8  0a                                 asl                    ; rotate left and place the MSB into the Carry
  255 A:98b9                                    ; rola operation fills the empty bits with zeroes
  256 A:98b9  90 02                              bcc zero                ; if carry is clear no need to do anything, continue
  257 A:98bb  49 07                              eor #$07             ; else, perform the X-OR of CRC with the polynomial
  258 A:98bd                           zero      
  258 A:98bd                                    
  259 A:98bd  ca                                 dex                    ; decrement bit counter
  260 A:98be  d0 f8                              bne crc_loop                ; if more bits need to be processed repeat the loop
  261 A:98c0  8d 3a a0                           sta checksum_tmp                ; save the new CRC va 

  263 A:98c3  c8                                 iny 
  264 A:98c4  c0 24                              cpy #checksum-opts_vals
  265 A:98c6  90 e8                              bcc byte_crc

  267 A:98c8                                    ;lda checksum_tmp
  268 A:98c8  60                                 rts 
  269 A:98c9                                     .) 

  271 A:98c9                           load_from_rom_xs .( 
  272 A:98c9  a0 23                              ldy #3*12-1
  273 A:98cb  b9 16 a0                 @1        lda opts_vals_dflt,y
  274 A:98ce  99 3b a0                           sta opts_vals,y
  275 A:98d1  88                                 dey 
  276 A:98d2  10 f7                              bpl @1
  277 A:98d4  60                                 rts 
  278 A:98d5                                     .) 

  280 A:98d5                                    ; ==========================================================
  281 A:98d5                                    ; detect hardware and handle option masks

  283 A:98d5                                     .xs 
  284 A:98d5                                    ; ----------------------------
  285 A:98d5                                    ; detect logic
  286 A:98d5                           detect_xs .( 
  287 A:98d5                                    ;-- detect UART 1 at $e818
  288 A:98d5                                    ; to detect a UART 16550 

  290 A:98d5                                    UART_RXTX=0           ; DLAB=0 
  291 A:98d5                                    UART_IER=1           ; DLAB=0 
  292 A:98d5                                    UART_DLL=0           ; divisor latch low, DLAB=1 
  293 A:98d5                                    UART_DLH=1           ; divisor latch high, DLAB=1 
  294 A:98d5                                    UART_IIR=2           ; Irq Ident. Reg., read only 
  295 A:98d5                                    UART_FCR=2           ; FIFO Ctrl Reg., write only 
  296 A:98d5                                    UART_LCR=3           ; Line Ctrl Reg 
  297 A:98d5                                    UART_MCR=4           ; Modem Ctrl Reg 
  298 A:98d5                                    UART_LSR=5           ; Line Status Reg 
  299 A:98d5                                    UART_MSR=6           ; Modem Status Reg 
  300 A:98d5                                    UART_SCR=7           ; 'scratchpad', i.e. unused 

  302 A:98d5                                     .( 
  303 A:98d5                                    UART=$e818
  304 A:98d5  ac 1c e8                           ldy UART+UART_MCR
  305 A:98d8  a9 10                              lda #$10
  306 A:98da  8d 1c e8                           sta UART+UART_MCR
  307 A:98dd  ad 1e e8                           lda UART+UART_MSR
  308 A:98e0  29 f0                              and #$f0
  309 A:98e2  d0 0e                              bne nodev
  310 A:98e4  a9 1f                              lda #$1f
  311 A:98e6  8d 1c e8                           sta UART+UART_MCR
  312 A:98e9  ad 1e e8                           lda UART+UART_MSR
  313 A:98ec  29 f0                              and #$f0
  314 A:98ee  c9 f0                              cmp #$f0
  315 A:98f0  f0 08                              beq dev
  316 A:98f2  8c 1c e8                 nodev     sty UART+UART_MCR         ; restore potential PIA register
  317 A:98f5  a0 bf                              ldy #255-OPT2_SERA
  318 A:98f7  20 50 99                           jsr clrmask2
  319 A:98fa                           dev       .) 
  320 A:98fa                                     .( 
  321 A:98fa                                    UART=$e828
  322 A:98fa  ac 2c e8                           ldy UART+UART_MCR
  323 A:98fd  a9 10                              lda #$10
  324 A:98ff  8d 2c e8                           sta UART+UART_MCR
  325 A:9902  ad 2e e8                           lda UART+UART_MSR
  326 A:9905  29 f0                              and #$f0
  327 A:9907  d0 0e                              bne nodev
  328 A:9909  a9 1f                              lda #$1f
  329 A:990b  8d 2c e8                           sta UART+UART_MCR
  330 A:990e  ad 2e e8                           lda UART+UART_MSR
  331 A:9911  29 f0                              and #$f0
  332 A:9913  c9 f0                              cmp #$f0
  333 A:9915  f0 08                              beq dev
  334 A:9917  8c 2c e8                 nodev     sty UART+UART_MCR         ; restore potential PIA register
  335 A:991a  a0 df                              ldy #255-OPT2_SERB
  336 A:991c  20 50 99                           jsr clrmask2
  337 A:991f                           dev       .) 
  338 A:991f                                    ; --
  339 A:991f                                    ; detect 2nd VIA
  340 A:991f                                     .( 
  341 A:991f                                    VIA2=$e850
  342 A:991f  ad 5c e8                           lda VIA2+VIA_PCR
  343 A:9922  29 11                              and #%00010001
  344 A:9924  8d 5c e8                           sta VIA2+VIA_PCR
  345 A:9927  cd 5c e8                           cmp VIA2+VIA_PCR
  346 A:992a  d0 0a                              bne nodev
  347 A:992c  09 66                              ora #%01100110
  348 A:992e  8d 5c e8                           sta VIA2+VIA_PCR
  349 A:9931  cd 5c e8                           cmp VIA2+VIA_PCR
  350 A:9934  f0 0a                              beq dev
  351 A:9936  a0 fe                    nodev     ldy #255-OPT1_SIEC
  352 A:9938  20 41 99                           jsr clrmask
  353 A:993b  a0 7f                              ldy #255-OPT2_UNITOFF_M
  354 A:993d  20 50 99                           jsr clrmask2
  355 A:9940                           dev       .) 
  356 A:9940  60                                 rts 

  358 A:9941  a2 00                    clrmask   ldx #0
  359 A:9943  98                       sm1       tya 
  360 A:9944  3d fe 9f                           and opts_mask,x
  361 A:9947  9d fe 9f                           sta opts_mask,x
  362 A:994a  e8                                 inx 
  363 A:994b  e0 0c                              cpx #OPT_MAX_X_I
  364 A:994d  90 f4                              bcc sm1
  365 A:994f  60                                 rts 
  366 A:9950                           clrmask2  
  367 A:9950  a2 00                              ldx #0
  368 A:9952  98                       sm2       tya 
  369 A:9953  3d 0a a0                           and opts_mask2,x
  370 A:9956  9d 0a a0                           sta opts_mask2,x
  371 A:9959  e8                                 inx 
  372 A:995a  e0 0c                              cpx #OPT_MAX_X_I
  373 A:995c  90 f4                              bcc sm2
  374 A:995e  60                                 rts 
  375 A:995f                                     .) 

  377 A:995f                                    ; ==========================================================
  378 A:995f                                    ; screen routines
  379 A:995f                                     .( 

  381 A:995f                                     .xl 

  383 A:995f                                    ; screen position starts line 9, position 12
  384 A:995f                                    ; distance every 2 chars
  385 A:995f                                    start=$8000+40*9+13
  386 A:995f                                    pos=2

  388 A:995f                           opttext_xl .( 
  389 A:995f  a2 00 00                           ldx #0
  390 A:9962  bd 70 99                 outl      lda text,x
  391 A:9965  f0 08                              beq endt
  392 A:9967  29 bf                              and #$bf             ; to PET Screencode
  393 A:9969  9d 50 80                           sta $8000+2*40,x
  394 A:996c  e8                                 inx 
  395 A:996d  d0 f3                              bne outl
  396 A:996f                           endt      
  397 A:996f  60                                 rts 

  399 A:9970  20 20 20 20 20 20 20 ... text      .asc "           MICRO-/ULTI-PET              "
  400 A:9998  20 20 20 20 20 20 20 ...           .asc "              OPTIONS                   "
  401 A:99c0  20 20 20 20 20 20 20 ...           .asc "                                        "

  410 A:99e8  43 52 53 52 2c 53 50 ...           .asc "CRSR,SPC, E","X"+128,"IT, ","R"+128,"ESET, ","L"+128,"OAD,","S"+128,"AVE FROM EE"
  411 A:9a10  20 20 20 20 20 20 20 ...           .asc "                                        "
  412 A:9a38  20 20 20 20 20 20 20 ...           .asc "            <--NORMAL---> <--SHIFTED--> "
  413 A:9a60  20 20 20 20 20 20 20 ...           .asc "             1 2 4 6 8 9   1 2 4 6 8 9  "
  414 A:9a88  53 50 45 45 44 20 20 ...           .asc "SPEED                                   "
  415 A:9ab0  4b 45 52 4e 41 4c 20 ...           .asc "KERNAL                                  "
  416 A:9ad8  42 41 53 49 43 20 20 ...           .asc "BASIC                                   "
  417 A:9b00  45 44 49 54 4f 52 20 ...           .asc "EDITOR                                  "
  418 A:9b28  4d 4f 4e 49 54 4f 52 ...           .asc "MONITOR                                 "
  419 A:9b50  53 44 2d 43 41 52 44 ...           .asc "SD-CARD                                 "
  420 A:9b78  53 44 20 55 4e 49 54 ...           .asc "SD UNIT                                 "
  421 A:9ba0  53 45 52 20 49 45 43 ...           .asc "SER IEC                                 "
  422 A:9bc8  55 4e 49 54 20 2b 31 ...           .asc "UNIT +10                                "
  423 A:9bf0  52 53 32 33 32 20 41 ...           .asc "RS232 A                                 "
  424 A:9c18  52 53 32 33 32 20 42 ...           .asc "RS232 B                                 "
  425 A:9c40  55 53 42 20 48 49 44 ...           .asc "USB HID                                 "
  426 A:9c68  53 43 52 45 45 4e 20 ...           .asc "SCREEN COL                              "
  427 A:9c90  00                                 .asc 0
  428 A:9c91                                     .) 

  430 A:9c91                                     .xs 

  432 A:9c91                                    ; ----------------------------------------------------------
  433 A:9c91                                    ; display all options

  435 A:9c91                           set_opts_xs .( 

  437 A:9c91  a2 00                              ldx #0
  438 A:9c93  8e f2 9f                           stx x
  439 A:9c96  a0 00                              ldy #0
  440 A:9c98  8c f3 9f                           sty y
  441 A:9c9b                           rowloop   
  442 A:9c9b  20 80 9d                           jsr getpos
  443 A:9c9e  ac f3 9f                           ldy y
  444 A:9ca1  ae f2 9f                           ldx x
  445 A:9ca4  c0 08                              cpy #8
  446 A:9ca6  b0 08                              bcs upper
  447 A:9ca8  bd fe 9f                           lda opts_mask,x
  448 A:9cab  39 f6 9f                           and pow2,y
  449 A:9cae  80 06                              bra rl1
  450 A:9cb0  bd 0a a0                 upper     lda opts_mask2,x
  451 A:9cb3  39 ee 9f                           and pow2-8,y
  452 A:9cb6  f0 49                    rl1       beq nextopt

  454 A:9cb8  c0 00                              cpy #OPT1_SPEED_I
  455 A:9cba  f0 37                              beq speed
  456 A:9cbc  c0 06                              cpy #OPT1_SDUNIT_I
  457 A:9cbe  f0 20                              beq unit
  458 A:9cc0                                     .assert OPT2_UNITOFF_I=8,"value assumption for branch"
  459 A:9cc0  c0 08                              cpy #OPT2_UNITOFF_I
  460 A:9cc2  f0 24                              beq prio
  461 A:9cc4  b0 0b                              bcs uppr

  463 A:9cc6  bd 3b a0                           lda opts_vals,x
  464 A:9cc9  39 f6 9f                           and pow2,y
  465 A:9ccc  20 1d 9f                           jsr showopt
  466 A:9ccf  80 30                              bra nextopt
  467 A:9cd1                           uppr      
  468 A:9cd1  c0 0c                              cpy #OPT2_SCRCOL_I
  469 A:9cd3  f0 26                              beq color
  470 A:9cd5  bd 47 a0                           lda opts_vals2,x
  471 A:9cd8  39 ee 9f                           and pow2-8,y
  472 A:9cdb  20 1d 9f                           jsr showopt
  473 A:9cde  80 21                              bra nextopt
  474 A:9ce0                           unit      
  475 A:9ce0  bd 53 a0                           lda unit_vals,x
  476 A:9ce3  20 22 9d                           jsr showunit
  477 A:9ce6  80 19                              bra nextopt

  479 A:9ce8  bd 47 a0                 prio      lda opts_vals2,x
  480 A:9ceb  39 ee 9f                           and pow2-8,y
  481 A:9cee  20 72 9d                           jsr showprio
  482 A:9cf1  80 0e                              bra nextopt

  484 A:9cf3  bd 53 a0                 speed     lda unit_vals,x
  485 A:9cf6  20 42 9d                           jsr showspeed
  486 A:9cf9  80 06                              bra nextopt

  488 A:9cfb  bd 53 a0                 color     lda unit_vals,x
  489 A:9cfe  20 5d 9d                           jsr showcol
  490 A:9d01                                    ; bra nextopt ; fallthrough

  492 A:9d01  ee f2 9f                 nextopt   inc x
  493 A:9d04  ae f2 9f                           ldx x
  494 A:9d07  e0 0c                              cpx #OPT_MAX_X_I
  495 A:9d09  90 90                              bcc rowloop
  496 A:9d0b  a2 00                              ldx #0
  497 A:9d0d  8e f2 9f                           stx x
  498 A:9d10  ee f3 9f                           inc y
  499 A:9d13  ac f3 9f                           ldy y
  500 A:9d16  c0 0d                              cpy #OPT_MAX_Y_I
  501 A:9d18  90 81                              bcc rowloop
  502 A:9d1a  a0 00                              ldy #0
  503 A:9d1c  8c f3 9f                           sty y
  504 A:9d1f  4c c7 9d                           jmp act
  505 A:9d22                                     .) 

  507 A:9d22                           showunit  .( 
  508 A:9d22  29 03                              and #3
  509 A:9d24  09 08                              ora #8
  510 A:9d26  a0 00                              ldy #0
  511 A:9d28  48                                 pha 
  512 A:9d29  c9 0a                              cmp #10
  513 A:9d2b  b0 08                              bcs tenplus
  514 A:9d2d  a9 20                              lda #" "
  515 A:9d2f  91 02                              sta (pos),y
  516 A:9d31  c8                                 iny 
  517 A:9d32  68                                 pla 
  518 A:9d33  80 08                              bra tp
  519 A:9d35  a9 31                    tenplus   lda #"1"
  520 A:9d37  91 02                              sta (pos),y
  521 A:9d39  c8                                 iny 
  522 A:9d3a  68                                 pla 
  523 A:9d3b  e9 0a                              sbc #10
  524 A:9d3d  09 30                    tp        ora #$30
  525 A:9d3f  91 02                              sta (pos),y
  526 A:9d41  60                                 rts 
  527 A:9d42                                     .) 

  529 A:9d42                           showspeed .( 
  530 A:9d42  0a                                 asl 
  531 A:9d43  b0 13                              bcs is4orM
  532 A:9d45  0a                                 asl 
  533 A:9d46  b0 03                              bcs is2
  534 A:9d48  a9 31                              lda #"1"
  535 A:9d4a  2c                                 .byt $2c
  536 A:9d4b  a9 32                    is2       lda #"2"
  537 A:9d4d  2c                                 .byt $2c
  538 A:9d4e  a9 34                    is4       lda #"4"
  539 A:9d50  2c                                 .byt $2c
  540 A:9d51  a9 0d                    isM       lda #"M"&$bf
  541 A:9d53  a0 01                              ldy #1
  542 A:9d55  91 02                              sta (pos),y
  543 A:9d57  60                                 rts 

  545 A:9d58  0a                       is4orM    asl 
  546 A:9d59  90 f3                              bcc is4
  547 A:9d5b  b0 f4                              bcs isM
  548 A:9d5d                                     .) 

  550 A:9d5d                           showcol   .( 
  551 A:9d5d  0a                                 asl 
  552 A:9d5e  0a                                 asl 
  553 A:9d5f  0a                                 asl 
  554 A:9d60  b0 09                              bcs isW
  555 A:9d62  0a                                 asl 
  556 A:9d63  b0 03                              bcs isA
  557 A:9d65  a9 07                              lda #"G"&$bf
  558 A:9d67  2c                                 .byt $2c
  559 A:9d68  a9 01                    isA       lda #"A"&$bf
  560 A:9d6a  2c                                 .byt $2c
  561 A:9d6b  a9 17                    isW       lda #"W"&$bf
  562 A:9d6d  a0 01                              ldy #1
  563 A:9d6f  91 02                              sta (pos),y
  564 A:9d71  60                                 rts 
  565 A:9d72                                     .) 

  567 A:9d72                           showprio  .( 
  568 A:9d72  f0 03                              beq prioser
  569 A:9d74  a9 50                              lda #"P"
  570 A:9d76  2c                                 .byt $2c
  571 A:9d77  a9 53                    prioser   lda #"S"
  572 A:9d79  29 bf                              and #$bf
  573 A:9d7b  a0 01                              ldy #1
  574 A:9d7d  91 02                              sta (pos),y
  575 A:9d7f  60                                 rts 
  576 A:9d80                                     .) 

  578 A:9d80                                    ; set pos screen pointer to x/y
  579 A:9d80                           getpos    .( 
  580 A:9d80  20 9a 9d                           jsr getpos_l
  581 A:9d83                           getpos_c  
  582 A:9d83  ad f2 9f                           lda x
  583 A:9d86  c9 06                              cmp #6
  584 A:9d88  90 02                              bcc @1
  585 A:9d8a  69 00                              adc #0
  586 A:9d8c  69 06                    @1        adc #6
  587 A:9d8e  0a                                 asl 
  588 A:9d8f  65 02                              adc pos
  589 A:9d91  85 02                              sta pos
  590 A:9d93  a9 00                              lda #0
  591 A:9d95  65 03                              adc pos+1
  592 A:9d97  85 03                              sta pos+1
  593 A:9d99  60                                 rts 
  594 A:9d9a                           getpos_l  
  595 A:9d9a  a9 00                              lda #0
  596 A:9d9c  85 03                              sta pos+1
  597 A:9d9e  ad f3 9f                           lda y
  598 A:9da1  0a                                 asl 
  599 A:9da2  0a                                 asl 
  600 A:9da3  0a                                 asl                    ; by 8
  601 A:9da4  85 02                              sta pos
  602 A:9da6  06 02                              asl pos
  603 A:9da8  26 03                              rol pos+1
  604 A:9daa  06 02                              asl pos
  605 A:9dac  26 03                              rol pos+1          ; by 32
  606 A:9dae  18                                 clc 
  607 A:9daf  65 02                              adc pos
  608 A:9db1  85 02                              sta pos
  609 A:9db3  a9 00                              lda #0
  610 A:9db5  65 03                              adc pos+1
  611 A:9db7  85 03                              sta pos+1
  612 A:9db9  a9 68                              lda #<start-13
  613 A:9dbb  18                                 clc 
  614 A:9dbc  65 02                              adc pos
  615 A:9dbe  85 02                              sta pos
  616 A:9dc0  a9 81                              lda #>start-13
  617 A:9dc2  65 03                              adc pos+1
  618 A:9dc4  85 03                              sta pos+1
  619 A:9dc6  60                                 rts 
  620 A:9dc7                                     .) 

  622 A:9dc7                                    ; de-select an option
  623 A:9dc7                           deact     
  624 A:9dc7                                    ; select an option
  625 A:9dc7                           act       .( 
  626 A:9dc7  20 9a 9d                           jsr getpos_l
  627 A:9dca  20 dc 9d                           jsr line_inv
  628 A:9dcd  20 83 9d                           jsr getpos_c
  629 A:9dd0  a0 01                              ldy #1
  630 A:9dd2  b1 02                    al        lda (pos),y
  631 A:9dd4                                    ;ora #128
  632 A:9dd4  29 7f                              and #127
  633 A:9dd6  91 02                              sta (pos),y
  634 A:9dd8  88                                 dey 
  635 A:9dd9  10 f7                              bpl al
  636 A:9ddb  60                                 rts 
  637 A:9ddc                                     .) 

  639 A:9ddc                           line_inv  .( 
  640 A:9ddc  a0 27                              ldy #39
  641 A:9dde  b1 02                    @1        lda (pos),y
  642 A:9de0  49 80                              eor #$80
  643 A:9de2  91 02                              sta (pos),y
  644 A:9de4  88                                 dey 
  645 A:9de5  10 f7                              bpl @1
  646 A:9de7  60                                 rts 
  647 A:9de8                                     .) 

  649 A:9de8                                    ; ----------------------------------------------------------
  650 A:9de8                                    ; handle keyboard input on options menu

  652 A:9de8                           do_opt_xs .( 
  653 A:9de8  48                                 pha 
  654 A:9de9  20 c7 9d                           jsr deact
  655 A:9dec  68                                 pla 

  657 A:9ded  a0 00                              ldy #0
  658 A:9def  d9 14 9e                 @1        cmp cmds,y
  659 A:9df2  f0 16                              beq found
  660 A:9df4  c8                                 iny 
  661 A:9df5  c0 09                              cpy #cmda-cmds
  662 A:9df7  90 f6                              bcc @1

  664 A:9df9                                    ; compare with actual boot option to directly start from options
  665 A:9df9  a0 00                              ldy #0
  666 A:9dfb  d9 d4 9f                 @2        cmp chars,y
  667 A:9dfe  f0 09                              beq out
  668 A:9e00  c8                                 iny 
  669 A:9e01  c0 12                              cpy #6*3
  670 A:9e03  90 f6                              bcc @2

  672 A:9e05  20 c7 9d                 endo      jsr act
  673 A:9e08  18                                 clc 
  674 A:9e09  60                       out       rts 

  676 A:9e0a  98                       found     tya 
  677 A:9e0b  0a                                 asl 
  678 A:9e0c  aa                                 tax 
  679 A:9e0d  b9 14 9e                           lda cmds,y
  680 A:9e10  38                                 sec                    ; for out
  681 A:9e11  7c 1d 9e                           jmp (cmda,x)

  683 A:9e14  1d 9d 91 11              cmds      .byt TC_CRGT,TC_CLFT,TC_CUP,TC_CDWN
  684 A:9e18  20 78 73 6c 72                     .byt " ","x","s","l","r"
  685 A:9e1d  71 9e 44 9e 97 9e be 9e  cmda      .word right,left,up,down
  686 A:9e25  e5 9e 09 9e 3a 9e 2f ...           .word action,out,save,load,reset

  688 A:9e2f                                    ; --------------------------
  689 A:9e2f                                    ; eeprom actions
  690 A:9e2f  20 d3 97                 load      jsr load_from_eeprom_xs
  691 A:9e32                                    ; TODO indicate error
  692 A:9e32  20 91 9c                 l1        jsr set_opts_xs
  693 A:9e35  20 c7 9d                           jsr act
  694 A:9e38  80 cb                              bra endo

  696 A:9e3a  20 22 98                 save      jsr save_to_eeprom_xs
  697 A:9e3d  80 c6                              bra endo

  699 A:9e3f  20 c9 98                 reset     jsr load_from_rom_xs
  700 A:9e42  80 ee                              bra l1

  702 A:9e44                                    ; --------------------------
  703 A:9e44                                    ; handle cursor actions

  705 A:9e44  ae f2 9f                 left      ldx x
  706 A:9e47  f0 bc                              beq endo
  707 A:9e49  ac f3 9f                           ldy y
  708 A:9e4c  c0 08                              cpy #8
  709 A:9e4e  b0 13                              bcs nxleft2
  710 A:9e50  ca                       nxleft    dex 
  711 A:9e51  bd fe 9f                           lda opts_mask,x
  712 A:9e54  39 f6 9f                           and pow2,y
  713 A:9e57  d0 05                              bne goleft
  714 A:9e59  8a                                 txa 
  715 A:9e5a  d0 f4                              bne nxleft
  716 A:9e5c  f0 a7                              beq endo
  717 A:9e5e  8e f2 9f                 goleft    stx x
  718 A:9e61  d0 a2                              bne endo
  719 A:9e63  ca                       nxleft2   dex 
  720 A:9e64  bd 0a a0                           lda opts_mask2,x
  721 A:9e67  39 ee 9f                           and pow2-8,y
  722 A:9e6a  d0 f2                              bne goleft
  723 A:9e6c  8a                                 txa 
  724 A:9e6d  d0 f4                              bne nxleft2
  725 A:9e6f  f0 94                              beq endo

  727 A:9e71  ae f2 9f                 right     ldx x
  728 A:9e74  e0 0b                    nxrght    cpx #OPT_MAX_X_I-1
  729 A:9e76  b0 8d                              bcs endo
  730 A:9e78  e8                                 inx 
  731 A:9e79  ac f3 9f                           ldy y
  732 A:9e7c  c0 08                              cpy #8
  733 A:9e7e  b0 0d                              bcs nxrght2
  734 A:9e80  bd fe 9f                           lda opts_mask,x
  735 A:9e83  39 f6 9f                           and pow2,y
  736 A:9e86  f0 ec                              beq nxrght
  737 A:9e88  8e f2 9f                 gorght    stx x
  738 A:9e8b  d0 4b                              bne endo2
  739 A:9e8d  bd 0a a0                 nxrght2   lda opts_mask2,x
  740 A:9e90  39 ee 9f                           and pow2-8,y
  741 A:9e93  d0 f3                              bne gorght
  742 A:9e95  f0 dd                              beq nxrght

  744 A:9e97  ac f3 9f                 up        ldy y
  745 A:9e9a  f0 3c                              beq endo2
  746 A:9e9c  88                       nxup      dey 
  747 A:9e9d  ae f2 9f                           ldx x
  748 A:9ea0  c0 08                              cpy #8
  749 A:9ea2  b0 0d                              bcs nxup2
  750 A:9ea4  bd fe 9f                           lda opts_mask,x
  751 A:9ea7  39 f6 9f                           and pow2,y
  752 A:9eaa  d0 0d                              bne goup
  753 A:9eac  98                       nxup2a    tya 
  754 A:9ead  d0 ed                              bne nxup
  755 A:9eaf  f0 27                              beq endo2
  756 A:9eb1  bd 0a a0                 nxup2     lda opts_mask2,x
  757 A:9eb4  39 ee 9f                           and pow2-8,y
  758 A:9eb7  f0 f3                              beq nxup2a
  759 A:9eb9  8c f3 9f                 goup      sty y
  760 A:9ebc  d0 1a                              bne endo2

  762 A:9ebe  ac f3 9f                 down      ldy y
  763 A:9ec1  c0 0c                    nxdown    cpy #OPT_MAX_Y_I-1
  764 A:9ec3  b0 13                              bcs endo2
  765 A:9ec5  ae f2 9f                           ldx x
  766 A:9ec8  c8                                 iny 
  767 A:9ec9  c0 08                              cpy #8
  768 A:9ecb  b0 0e                              bcs nxd2
  769 A:9ecd  bd fe 9f                           lda opts_mask,x
  770 A:9ed0  39 f6 9f                           and pow2,y
  771 A:9ed3  f0 ec                              beq nxdown
  772 A:9ed5  8c f3 9f                 godo      sty y
  773 A:9ed8  4c 05 9e                 endo2     jmp endo
  774 A:9edb  bd 0a a0                 nxd2      lda opts_mask2,x
  775 A:9ede  39 ee 9f                           and pow2-8,y
  776 A:9ee1  d0 f2                              bne godo
  777 A:9ee3  f0 dc                              beq nxdown

  779 A:9ee5                                    ; --------------------------
  780 A:9ee5                                    ; handle actual change

  782 A:9ee5  ae f2 9f                 action    ldx x
  783 A:9ee8  ac f3 9f                           ldy y
  784 A:9eeb  c0 00                              cpy #OPT1_SPEED_I
  785 A:9eed  f0 3a                              beq actspeed
  786 A:9eef  c0 06                              cpy #OPT1_SDUNIT_I
  787 A:9ef1  f0 45                              beq actunit
  788 A:9ef3  c0 08                              cpy #OPT2_UNITOFF_I
  789 A:9ef5  f0 63                              beq actprio
  790 A:9ef7                                     .assert OPT2_UNITOFF_I=8,"optimized compare"
  791 A:9ef7  b0 0e                              bcs act2
  792 A:9ef9  bd 3b a0                           lda opts_vals,x
  793 A:9efc  59 f6 9f                           eor pow2,y
  794 A:9eff  9d 3b a0                           sta opts_vals,x
  795 A:9f02  39 f6 9f                           and pow2,y
  796 A:9f05  80 10                              bra act2b
  797 A:9f07  c0 0c                    act2      cpy #OPT2_SCRCOL_I
  798 A:9f09  f0 61                              beq actcol
  799 A:9f0b  bd 47 a0                           lda opts_vals2,x
  800 A:9f0e  59 ee 9f                           eor pow2-8,y
  801 A:9f11  9d 47 a0                           sta opts_vals2,x
  802 A:9f14  39 ee 9f                           and pow2-8,y
  803 A:9f17  20 1d 9f                 act2b     jsr showopt
  804 A:9f1a  4c c7 9d                           jmp act
  805 A:9f1d                           showopt   
  806 A:9f1d  f0 03                              beq notset
  807 A:9f1f  a9 51                              lda #ONCHAR
  808 A:9f21  2c                                 .byt $2c
  809 A:9f22  a9 2e                    notset    lda #OFFCHAR
  810 A:9f24  a0 01                              ldy #1
  811 A:9f26  91 02                              sta (pos),y
  812 A:9f28  60                                 rts 

  814 A:9f29                           actspeed  .( 
  815 A:9f29  bd 53 a0                           lda unit_vals,x
  816 A:9f2c  18                                 clc 
  817 A:9f2d  69 40                              adc #64
  818 A:9f2f  9d 53 a0                           sta unit_vals,x
  819 A:9f32  20 42 9d                           jsr showspeed
  820 A:9f35  4c 05 9e                           jmp endo
  821 A:9f38                                     .) 

  823 A:9f38                           actunit   .( 
  824 A:9f38  bd 53 a0                           lda unit_vals,x
  825 A:9f3b  29 03                              and #3
  826 A:9f3d  1a                                 inc 
  827 A:9f3e  c9 04                              cmp #4
  828 A:9f40  90 02                              bcc a1
  829 A:9f42  a9 00                              lda #0
  830 A:9f44  48                       a1        pha 
  831 A:9f45  a9 fc                              lda #%11111100
  832 A:9f47  3d 53 a0                           and unit_vals,x
  833 A:9f4a  9d 53 a0                           sta unit_vals,x
  834 A:9f4d  68                                 pla 
  835 A:9f4e  1d 53 a0                           ora unit_vals,x
  836 A:9f51  9d 53 a0                           sta unit_vals,x
  837 A:9f54  20 22 9d                           jsr showunit
  838 A:9f57  4c 05 9e                           jmp endo
  839 A:9f5a                                     .) 

  841 A:9f5a                                     .assert OPT2_UNITOFF_I>7,"lookup tables"
  842 A:9f5a                           actprio   
  843 A:9f5a  bd 47 a0                           lda opts_vals2,x
  844 A:9f5d  59 ee 9f                           eor pow2-8,y
  845 A:9f60  9d 47 a0                           sta opts_vals2,x
  846 A:9f63  39 ee 9f                           and pow2-8,y
  847 A:9f66  20 72 9d                           jsr showprio
  848 A:9f69  4c 05 9e                           jmp endo

  850 A:9f6c                           actcol    .( 
  851 A:9f6c  bd 53 a0                           lda unit_vals,x
  852 A:9f6f  18                                 clc 
  853 A:9f70  69 10                              adc #16
  854 A:9f72  9d 53 a0                           sta unit_vals,x
  855 A:9f75  29 30                              and #32+16
  856 A:9f77  c9 30                              cmp #32+16
  857 A:9f79  d0 08                              bne ok
  858 A:9f7b  bd 53 a0                           lda unit_vals,x
  859 A:9f7e  29 cf                              and #255-32-16
  860 A:9f80  9d 53 a0                           sta unit_vals,x
  861 A:9f83  20 5d 9d                 ok        jsr showcol
  862 A:9f86  4c 05 9e                           jmp endo
  863 A:9f89                                     .) 

  865 A:9f89                                     .) 

  867 A:9f89                                     .xl 

  869 A:9f89                                    ; ----------------------------
  870 A:9f89                                    ; In: AC has key in ASCII
  871 A:9f89                                    ;
  872 A:9f89                                    ; out:  c=0:    no option
  873 A:9f89                                    ;       c=1:    result is in AC:
  874 A:9f89                                    ;
  875 A:9f89                                    ; stores selected options in 
  876 A:9f89                                    ; opt0, opt1, opt2, and optu
  877 A:9f89                                    ;
  878 A:9f89                                     .xl 
  879 A:9f89                           conv_char2opt_xl .( 
  880 A:9f89  a2 11 00                           ldx #opts-chars-1
  881 A:9f8c  dd d4 9f                 l0        cmp chars,x
  882 A:9f8f  f0 05                              beq found                ; implicit sec
  883 A:9f91  ca                                 dex 
  884 A:9f92  10 f8                              bpl l0
  885 A:9f94  18                                 clc 
  886 A:9f95  60                                 rts 
  887 A:9f96  e0 0c 00                 found     cpx #MAX_KEYS*2
  888 A:9f99  90 04                              bcc notusb
  889 A:9f9b  8a                                 txa 
  890 A:9f9c  e9 06                              sbc #MAX_KEYS
  891 A:9f9e  aa                                 tax 
  892 A:9f9f                           notusb    
  893 A:9f9f  ad fc 87                           lda optkbd
  894 A:9fa2  29 28                              and #%00101000             ; filter usb and c64 kbd flags
  895 A:9fa4  1d e6 9f                           ora opts,x
  896 A:9fa7  8d f8 87                           sta opt0

  898 A:9faa                                    ; copy inverted editor ROM bit for easier EDIT rom selection
  899 A:9faa  bd 3b a0                           lda opts_vals,x
  900 A:9fad  29 10                              and #OPT1_EDITOR
  901 A:9faf                                     .assert OPT1_EDITOR=16,"bit shift"
  902 A:9faf  0a                                 asl 
  903 A:9fb0  0a                                 asl 
  904 A:9fb1  0a                                 asl 
  905 A:9fb2  49 80                              eor #%10000000
  906 A:9fb4  0d f8 87                           ora opt0
  907 A:9fb7  8d f8 87                           sta opt0

  909 A:9fba  bd 3b a0                           lda opts_vals,x
  910 A:9fbd  3d fe 9f                           and opts_mask,x
  911 A:9fc0  8d f7 87                           sta opt1

  913 A:9fc3  bd 47 a0                           lda opts_vals2,x
  914 A:9fc6  3d 0a a0                           and opts_mask2,x
  915 A:9fc9  8d f6 87                           sta opt2

  917 A:9fcc  bd 53 a0                           lda unit_vals,x
  918 A:9fcf  8d f5 87                           sta optu
  919 A:9fd2  38                                 sec 
  920 A:9fd3  60                                 rts 
  921 A:9fd4                                     .) 

  923 A:9fd4                                    MAX_KEYS=6

  925 A:9fd4  31 32 34 36 38 39        chars     .byt "124689"
  926 A:9fda                                    ; shifted keys from pet / c64 kbd
  927 A:9fda  b1 b2 b4 b6 b8 b9                  .byt "1"+128,"2"+128,"4"+128,"6"+128,"8"+128,"9"+128
  928 A:9fe0                                    ; shifted keys from USB
  929 A:9fe0  21 22 24 5e 2a 28                  .byt "!",$22,"$","^","*","("
  930 A:9fe6                           opts      
  931 A:9fe6  01                                 .byt %00000001              ; patched basic1
  932 A:9fe7  02                                 .byt %00000010              ; patched basic2
  933 A:9fe8  03                                 .byt %00000011              ; patched 40 col
  934 A:9fe9  43                                 .byt %01000011              ; patched 8296
  935 A:9fea  43                                 .byt %01000011              ; patched 80 col

  937 A:9feb  43                                 .byt %01000011              ; patched 80 col

  939 A:9fec  01                                 .byt %00000001              ; unpatched basic1
  940 A:9fed  02                                 .byt %00000010              ; unpatched basic2
  941 A:9fee  03                                 .byt %00000011              ; unpatched 40 col
  942 A:9fef  53                                 .byt %01010011              ; unpatched 8296
  943 A:9ff0  43                                 .byt %01000011              ; unpatched 80 col

  945 A:9ff1  04                                 .byt %00000100              ; option menu

  947 A:9ff2                                    ; temp
  948 A:9ff2  00                       x         .byt 0
  949 A:9ff3  00                       y         .byt 0
  950 A:9ff4  00 00                    row       .word 0

  952 A:9ff6  80                       pow2      .byt %10000000
  953 A:9ff7  40                                 .byt %01000000
  954 A:9ff8  20                                 .byt %00100000
  955 A:9ff9  10                                 .byt %00010000
  956 A:9ffa  08                                 .byt %00001000
  957 A:9ffb  04                                 .byt %00000100
  958 A:9ffc  02                                 .byt %00000010
  959 A:9ffd  01                                 .byt %00000001

  961 A:9ffe                                    ; bits are:

  963 A:9ffe                           opts_mask 
  964 A:9ffe  c0                                 .byt %11000000              ; 1
  965 A:9fff  80                                 .byt %10000000              ; 2
  966 A:a000  f7                                 .byt %11110111              ; 4
  967 A:a001  f7                                 .byt %11110111              ; 6
  968 A:a002  f7                                 .byt %11110111              ; 8

  970 A:a003  00                                 .byt %00000000              ; 9

  972 A:a004  c0                                 .byt %11000000              ; 1
  973 A:a005  80                                 .byt %10000000              ; 2
  974 A:a006  f7                                 .byt %11110111              ; 4
  975 A:a007  f7                                 .byt %11110111              ; 6
  976 A:a008  f7                                 .byt %11110111              ; 8

  978 A:a009  00                                 .byt %00000000              ; 9

  980 A:a00a                           opts_mask2 
  981 A:a00a  08                                 .byt %00001000              ; 1
  982 A:a00b  08                                 .byt %00001000              ; 2
  983 A:a00c  f8                                 .byt %11111000              ; 4
  984 A:a00d  f8                                 .byt %11111000              ; 6
  985 A:a00e  f8                                 .byt %11111000              ; 8

  987 A:a00f  00                                 .byt %00000000              ; 9

  989 A:a010  08                                 .byt %00001000              ; 1
  990 A:a011  08                                 .byt %00001000              ; 2
  991 A:a012  f8                                 .byt %11111000              ; 4
  992 A:a013  f8                                 .byt %11111000              ; 6
  993 A:a014  f8                                 .byt %11111000              ; 8

  995 A:a015  00                                 .byt %00000000              ; 9

  997 A:a016                                     .) 

  999 A:a016                                    ; --------------------------
 1000 A:a016                                    ; default entries (if not loaded from EEPROM)
 1001 A:a016                           opts_vals_dflt 
 1002 A:a016  c0                                 .byt %11000000              ; 1
 1003 A:a017  80                                 .byt %10000000              ; 2
 1004 A:a018  ff                                 .byt %11111111              ; 4
 1005 A:a019  ff                                 .byt %11111111              ; 6
 1006 A:a01a  ff                                 .byt %11111111              ; 8

 1008 A:a01b  ff                                 .byt %11111111              ; 9

 1010 A:a01c  00                                 .byt %00000000              ; 1
 1011 A:a01d  00                                 .byt %00000000              ; 2
 1012 A:a01e  00                                 .byt %00000000              ; 4
 1013 A:a01f  00                                 .byt %00000000              ; 6
 1014 A:a020  00                                 .byt %00000000              ; 8

 1016 A:a021  00                                 .byt %00000000              ; 9

 1018 A:a022                           opts_vals2_dflt 
 1019 A:a022  00                                 .byt %00000000              ; 1
 1020 A:a023  00                                 .byt %00000000              ; 2
 1021 A:a024  10                                 .byt %00010000              ; 4
 1022 A:a025  10                                 .byt %00010000              ; 6
 1023 A:a026  10                                 .byt %00010000              ; 8

 1025 A:a027  10                                 .byt %00010000              ; 9

 1027 A:a028  00                                 .byt %00000000              ; 1
 1028 A:a029  00                                 .byt %00000000              ; 2
 1029 A:a02a  00                                 .byt %00000000              ; 4
 1030 A:a02b  00                                 .byt %00000000              ; 6
 1031 A:a02c  00                                 .byt %00000000              ; 8

 1033 A:a02d  00                                 .byt %00000000              ; 9

 1035 A:a02e                           unit_vals_dflt 
 1036 A:a02e  00                                 .byt %00000000              ; 1 - 1 MHz, unit 8
 1037 A:a02f  00                                 .byt %00000000              ; 2
 1038 A:a030  00                                 .byt %00000000              ; 4
 1039 A:a031  00                                 .byt %00000000              ; 6
 1040 A:a032  00                                 .byt %00000000              ; 8
 1041 A:a033  00                                 .byt %00000000              ; 9

 1043 A:a034  00                                 .byt %00000000              ; 1
 1044 A:a035  00                                 .byt %00000000              ; 2
 1045 A:a036  00                                 .byt %00000000              ; 4
 1046 A:a037  00                                 .byt %00000000              ; 6
 1047 A:a038  00                                 .byt %00000000              ; 8
 1048 A:a039  00                                 .byt %00000000              ; 9

 1050 A:a03a                           checksum_tmp 
 1051 A:a03a  00                                 .byt 0

 1053 A:a03b                                    ; --------------------------
 1054 A:a03b                                    ; actual config values
 1055 A:a03b                                    ; TODO: move to real RAM?
 1056 A:a03b                           opts_vals 
 1057 A:a03b  00 ff 0c 00 00 64 fc ...           .dsb 12
 1058 A:a047                           opts_vals2 
 1059 A:a047  00 ff 0c 00 00 64 fc ...           .dsb 12
 1060 A:a053                           unit_vals 
 1061 A:a053  00 ff 0c 00 00 64 fc ...           .dsb 12
 1062 A:a05f                           checksum  
 1063 A:a05f  00                                 .byt 0
 1064 A:a060                           opts_vals_end 

 1067 A:a060                                     .) 

boot_rom1.a65


    2 A:a060                           setup_basic1_xl .( 
    3 A:a060                                    ; -----------------------
    4 A:a060                                    ; copy over BASIC 1 charrom to RAM
    5 A:a060                                    ; $14000-$15fff in flash img

    7 A:a060  a9 80                              lda #$80
    8 A:a062  a2 00 c0                           ldx #$c000
    9 A:a065  a0 00 20                           ldy #$2000
   10 A:a068  20 de 90                           jsr flash2direct2_xl

   12 A:a06b                                    ; now copy from bank 0 to target location
   13 A:a06b  a2 00 00                           ldx #0
   14 A:a06e                           copy      
   15 A:a06e  bd 00 c0                           lda $c000,x            ; location in test ROM bank
   16 A:a071  9f 00 00 08                        sta VBANK,x              ; location in RAM - uppermost RAM bank
   17 A:a075  e8                                 inx 
   18 A:a076  e0 00 20                           cpx #$2000
   19 A:a079  d0 f3                              bne copy

   21 A:a07b                                    ;------------------------
   22 A:a07b                                    ; BASIC 1
   23 A:a07b  a9 40                              lda #$40             ; source page in Flash
   24 A:a07d  a2 00 c0                           ldx #$c000             ; target addr
   25 A:a080  a0 00 40                           ldy #$4000             ; len
   26 A:a083  20 d9 90                           jsr flash2direct_xl

   28 A:a086  ad f7 87                           lda opt1
   29 A:a089  10 03                              bpl b1_orig                ; check KERNEL patch

   31 A:a08b                                    ; apply BASIC1 patch like in VICE
   32 A:a08b  20 93 a0                           jsr patch_rom1_xl
   33 A:a08e                           b1_orig   
   34 A:a08e  a9 80                              lda #%10000000             ; write protect $c000-$ffff
   35 A:a090  4c c3 90                           jmp end

   38 A:a093                                    PATCH=$ef00

   40 A:a093                           patch_rom1_xl 

   42 A:a093                                    ; transferred over from VICE
   43 A:a093  a9 ea                              lda #$ea             ; NOP
   44 A:a095  8d 71 f4                           sta $f471
   45 A:a098  8d 72 f4                           sta $f472
   46 A:a09b  8d 80 f1                           sta $f180
   47 A:a09e  8d 81 f1                           sta $f181
   48 A:a0a1  a9 f8                              lda #$f8
   49 A:a0a3  8d ef f3                           sta $f3ef
   50 A:a0a6  a9 f7                              lda #$f7
   51 A:a0a8  8d f3 f3                           sta $f3f3

   53 A:a0ab                                    ; patch area start
   54 A:a0ab  a2 00 ef                           ldx #PATCH

   56 A:a0ae                                    ; jmp to first patch
   57 A:a0ae  8a                                 txa 
   58 A:a0af  8d 70 f3                           sta $f370
   59 A:a0b2  a9 ef                              lda #>PATCH
   60 A:a0b4  8d 71 f3                           sta $f371

   62 A:a0b7  a0 00 00                           ldy #0
   63 A:a0ba  b9 62 a1                 pl0       lda PATCH_0,y
   64 A:a0bd  95 00                              sta 0,x
   65 A:a0bf  e8                                 inx 
   66 A:a0c0  c8                                 iny 
   67 A:a0c1  c0 05 00                           cpy #5
   68 A:a0c4  d0 f4                              bne pl0

   70 A:a0c6                                    ; jump to second patch
   71 A:a0c6  8a                                 txa 
   72 A:a0c7  8d 79 f3                           sta $f379
   73 A:a0ca  a9 ef                              lda #>PATCH
   74 A:a0cc  8d 7a f3                           sta $f37a

   76 A:a0cf  a0 00 00                           ldy #0
   77 A:a0d2  b9 67 a1                 pl1       lda PATCH_1,y
   78 A:a0d5  95 00                              sta 0,x
   79 A:a0d7  e8                                 inx 
   80 A:a0d8  c8                                 iny 
   81 A:a0d9  c0 13 00                           cpy #19
   82 A:a0dc  d0 f4                              bne pl1

   84 A:a0de                                    ; JSR to third patch
   85 A:a0de  a9 20                              lda #$20
   86 A:a0e0  8d cc f3                           sta $f3cc
   87 A:a0e3  8a                                 txa 
   88 A:a0e4  8d cd f3                           sta $f3cd
   89 A:a0e7  a9 ef                              lda #>PATCH
   90 A:a0e9  8d ce f3                           sta $f3ce

   92 A:a0ec  a0 00 00                           ldy #0
   93 A:a0ef  b9 7a a1                 pl2       lda PATCH_2,y
   94 A:a0f2  95 00                              sta 0,x
   95 A:a0f4  e8                                 inx 
   96 A:a0f5  c8                                 iny 
   97 A:a0f6  c0 0a 00                           cpy #10
   98 A:a0f9  d0 f4                              bne pl2

  100 A:a0fb                                    ; jmp to fourth patch
  101 A:a0fb  8a                                 txa 
  102 A:a0fc  8d c1 f6                           sta $f6c1
  103 A:a0ff  a9 ef                              lda #>PATCH
  104 A:a101  8d c2 f6                           sta $f6c2

  106 A:a104  a0 00 00                           ldy #0
  107 A:a107  b9 84 a1                 pl3       lda PATCH_3,y
  108 A:a10a  95 00                              sta 0,x
  109 A:a10c  e8                                 inx 
  110 A:a10d  c8                                 iny 
  111 A:a10e  c0 05 00                           cpy #5
  112 A:a111  d0 f4                              bne pl3

  114 A:a113                                    ; jump to fifth patch
  115 A:a113  8a                                 txa 
  116 A:a114  8d c7 f6                           sta $f6c7
  117 A:a117  a9 ef                              lda #>PATCH
  118 A:a119  8d c8 f6                           sta $f6c8

  120 A:a11c  a0 00 00                           ldy #0
  121 A:a11f  b9 89 a1                 pl4       lda PATCH_4,y
  122 A:a122  95 00                              sta 0,x
  123 A:a124  e8                                 inx 
  124 A:a125  c8                                 iny 
  125 A:a126  c0 12 00                           cpy #18
  126 A:a129  d0 f4                              bne pl4

  128 A:a12b                                    ; insert sixth patch
  129 A:a12b  a0 00 00                           ldy #0
  130 A:a12e  b9 9b a1                 pl5       lda PATCH_5,y
  131 A:a131  99 81 f3                           sta $f381,y
  132 A:a134  c8                                 iny 
  133 A:a135  c0 08 00                           cpy #8
  134 A:a138  d0 f4                              bne pl5

  136 A:a13a                                    ; jump to seventh patch
  137 A:a13a  8a                                 txa 
  138 A:a13b  8d f4 f6                           sta $f6f4
  139 A:a13e  a9 ef                              lda #>PATCH
  140 A:a140  8d f5 f6                           sta $f6f5

  142 A:a143  a0 00 00                           ldy #0
  143 A:a146  b9 a3 a1                 pl6       lda PATCH_6,y
  144 A:a149  95 00                              sta 0,x
  145 A:a14b  e8                                 inx 
  146 A:a14c  c8                                 iny 
  147 A:a14d  c0 06 00                           cpy #6
  148 A:a150  d0 f4                              bne pl6

  150 A:a152                                    ; insert marker
  151 A:a152  a0 00 00                           ldy #0
  152 A:a155  98                                 tya                    ; fill B with zero, so cmp work?
  153 A:a156  b9 a9 a1                 plm       lda MARK,y
  154 A:a159  95 00                              sta 0,x
  155 A:a15b  e8                                 inx 
  156 A:a15c  c8                                 iny 
  157 A:a15d  c9 00                              cmp #0
  158 A:a15f  d0 f5                              bne plm

  160 A:a161  60                                 rts 

  162 A:a162  a9 60 85 f0 60           PATCH_0   .byt $a9,$60,$85,$f0,$60
  163 A:a167  20 b6 f0 a5 f0 20 5b ... PATCH_1   .byt $20,$b6,$f0,$a5,$f0,$20,$5b,$f1,$20,$87,$f1,$85,$f7,$20,$87,$f1,$85,$f8,$60
  164 A:a17a  20 7a f1 20 e6 f6 ad ... PATCH_2   .byt $20,$7a,$f1,$20,$e6,$f6,$ad,$0b,$02,$60
  165 A:a184  a9 61 85 f0 60           PATCH_3   .byt $a9,$61,$85,$f0,$60
  166 A:a189  20 ba f0 a5 f0 20 2c ... PATCH_4   .byt $20,$ba,$f0,$a5,$f0,$20,$2c,$f1,$a5,$f7,$20,$67,$f1,$a5,$f8,$4c,$67,$f1
  167 A:a19b  ae 0c 02 70 46 20 87 f1  PATCH_5   .byt $ae,$0c,$02,$70,$46,$20,$87,$f1
  168 A:a1a3  20 2c f1 4c 7e f1        PATCH_6   .byt $20,$2c,$f1,$4c,$7e,$f1

  170 A:a1a9  42 41 53 49 43 31 20 ... MARK      .asc "BASIC1 PATCH FOR IEEE488",0
  171 A:a1c2                                     .) 

boot_rom2.a65


    3 A:a1c2                                    ;------------------------
    4 A:a1c2                                    ; upgrade ROMs with BASIC2
    5 A:a1c2                           setup_basic2_xl .( 
    6 A:a1c2                                    ; copy over PET ROM into low RAM
    7 A:a1c2                                    ; $4000-$7fff in bootimg to $c000-$ffff in RAM

    9 A:a1c2  a9 80                              lda #$80
   10 A:a1c4  a2 00 c0                           ldx #$c000
   11 A:a1c7  a0 00 40                           ldy #$4000
   12 A:a1ca  20 d9 90                           jsr flash2direct_xl

   14 A:a1cd  a9 80                              lda #%10000000             ; write protect $c000-$ffff
   15 A:a1cf  4c c3 90                           jmp end
   16 A:a1d2                                     .) 

boot_rom4.a65


    2 A:a1d2                           setup_basic4_xl .( 
    3 A:a1d2                                    ; where do we store the extra patch code
    4 A:a1d2                                    IEEE_PATCH=$fe20           ; IEEE fix for faster CPU clocks
    5 A:a1d2                                    SDC_COMPANION=$fe30           ; SD-Card link
    6 A:a1d2                                    USB_COMPANION=$df00           ; USB link
    7 A:a1d2                                    USB_CPAGE=$1f           ;$0f ; where USB companion is in flash

    9 A:a1d2                                    MAP_USB=15
   10 A:a1d2                                    STPFL=$9b
   11 A:a1d2                                    driver_init=$1000

   13 A:a1d2                                    ; -----------------------
   14 A:a1d2                                    ; copy over PET BASIC4 $b000-$dfff
   15 A:a1d2  a9 c0                              lda #$c0
   16 A:a1d4  a2 00 b0                           ldx #$b000
   17 A:a1d7  a0 00 30                           ldy #$3000
   18 A:a1da  20 d9 90                           jsr flash2direct_xl

   20 A:a1dd                                    ; copy over PET KERNEL4 $f000-$ffff
   21 A:a1dd  a9 f0                              lda #$f0
   22 A:a1df  a2 00 f0                           ldx #$f000
   23 A:a1e2  a0 00 10                           ldy #$1000
   24 A:a1e5  20 d9 90                           jsr flash2direct_xl

   26 A:a1e8  ad f8 87                           lda opt0                ; bits 7/6/5 have number of editor ROM
   27 A:a1eb                                    ; bit 7: 1=orig, 0=patched
   28 A:a1eb                                    ; bit 6: 1=80 col, 0=40 col
   29 A:a1eb                                    ; bit 5: 1=c64, 0=PET-N kbd
   30 A:a1eb                                    ; 000 = PET-N, 40 col, patched
   31 A:a1eb                                    ; 001 = C64,   40 col, patched
   32 A:a1eb                                    ; 010 = PET-N, 80 col, patched
   33 A:a1eb                                    ; 011 = C64,   80 col, patched
   34 A:a1eb                                    ; 100 = PET-N, 40 col, orig
   35 A:a1eb                                    ; 101 = C64,   40 col, orig
   36 A:a1eb                                    ; 110 = PET-N, 80 col, orig
   37 A:a1eb                                    ; 111 = C64,   80 col, orig
   38 A:a1eb  29 e0                              and #%11100000
   39 A:a1ed  4a                                 lsr 
   40 A:a1ee  a2 00 e0                           ldx #$e000
   41 A:a1f1  a0 00 10                           ldy #$1000
   42 A:a1f4  20 de 90                           jsr flash2direct2_xl

   44 A:a1f7                                    ; -----------------------
   45 A:a1f7                                    ; TODO check monitor bit
   46 A:a1f7                                    ; TODO overwrites boot code! needs some relocation!
   47 A:a1f7                                    ; lda #0
   48 A:a1f7                                    ; ldx #$a000
   49 A:a1f7                                    ; ldy #$1000
   50 A:a1f7                                    ; jsr flash2direct3_xl

   52 A:a1f7                                    ; ------------------
   53 A:a1f7                                    ; check USB patch
   54 A:a1f7  ad f8 87                           lda opt0                ; from keyboard selection
   55 A:a1fa  29 08                              and #OPT0_USBKBD
   56 A:a1fc  d0 07                              bne dousb
   57 A:a1fe  ad f6 87                           lda opt2                ; from options menu
   58 A:a201  29 10                              and #OPT2_USBHID
   59 A:a203  f0 1b                              beq nousb
   60 A:a205                           dousb     
   61 A:a205  a2 00 00                           ldx #0
   62 A:a208  bd e0 a6                 :           lda usbcomp_start,x
   63 A:a20b  9d 00 df                           sta USB_COMPANION,x
   64 A:a20e  e8                                 inx 
   65 A:a20f  e0 88 00                           cpx #usbcomp_end-usbcomp_start
   66 A:a212  90 f4                              bcc :-

   68 A:a214                                    ; set X/Y registers to 8 bit ...
   69 A:a214  e2 10                              sep #%00010000
   70 A:a216                                     .xs 

   72 A:a216                                    ; install it into the ROM
   73 A:a216  20 03 df                           jsr USB_COMPANION+3
   74 A:a219  c2 10                              rep #%00010000
   75 A:a21b                                     .xl 

   77 A:a21b                                    ; reverse write protect done there
   78 A:a21b  a9 00                              lda #0
   79 A:a21d  8d 01 e8                           sta $e801

   81 A:a220                                    ; ------------------
   82 A:a220                                    ; check SD Card
   83 A:a220                           nousb     
   84 A:a220  ad f7 87                           lda opt1
   85 A:a223  29 04                              and #OPT1_SDCARD
   86 A:a225  f0 03                              beq nosd
   87 A:a227  20 48 a2                           jsr patch_sdcard4_xl
   88 A:a22a                           nosd      
   89 A:a22a                                    ; ------------------
   90 A:a22a                                    ; check BASIC4 patch
   91 A:a22a                                    ; uses kernel, basic, siec patch bits
   92 A:a22a  20 57 a2                           jsr patch_rom4_xl

   95 A:a22d                                    ; ------------------
   96 A:a22d                                    ; memory map setup
   97 A:a22d                           b4_orig   
   98 A:a22d                                    ; check 80 column bit
   99 A:a22d                                    ; TODO move to Viccy on FPGA machines
  100 A:a22d  ad f8 87                           lda opt0
  101 A:a230  29 40                              and #%01000000
  102 A:a232  f0 05                              beq col40
  103 A:a234  a9 02                              lda #%00000010
  104 A:a236  8d 00 e8                           sta VCTRL
  105 A:a239                           col40     
  106 A:a239                                    ; check 8296 bit
  107 A:a239  ad f8 87                           lda opt0
  108 A:a23c  29 10                              and #%00010000
  109 A:a23e  f0 03                              beq not_96
  110 A:a240                                    ; 8296
  111 A:a240  a9 e8                              lda #%11101000
  112 A:a242  2c                                 .byt $2c
  113 A:a243  a9 e0                    not_96    lda #%11100000

  115 A:a245  4c c3 90                           jmp end

  118 A:a248                           patch_sdcard4_xl .( 

  120 A:a248                                    ; -------------------------------
  121 A:a248                                    ; SD Card patch

  123 A:a248                                    ; set X/Y registers to 8 bit ...
  124 A:a248  e2 10                              sep #%00010000
  125 A:a24a                                     .xs 

  127 A:a24a  ad f5 87                           lda optu
  128 A:a24d  29 03                              and #3
  129 A:a24f  09 08                              ora #8
  130 A:a251  20 a8 a2                           jsr sdcard_install

  132 A:a254  c2 10                              rep #%00010000
  133 A:a256                                     .xl 
  134 A:a256  60                                 rts 
  135 A:a257                                     .) 

  137 A:a257                           patch_rom4_xl .( 
  138 A:a257                                    ; set X/Y registers to 8 bit ...
  139 A:a257  e2 10                              sep #%00010000
  140 A:a259                                     .xs 

  142 A:a259  20 10 a4                           jsr patch_rom4_init

  144 A:a25c  ad f7 87                           lda opt1
  145 A:a25f  29 40                              and #OPT1_KERNAL
  146 A:a261  f0 03                              beq nokern
  147 A:a263  20 21 a4                           jsr patch_kernal4
  148 A:a266                           nokern    
  149 A:a266  ad f7 87                           lda opt1
  150 A:a269  29 20                              and #OPT1_BASIC
  151 A:a26b  f0 03                              beq nobasic
  152 A:a26d  20 31 a4                           jsr patch_basic4
  153 A:a270                           nobasic   
  154 A:a270  20 1a a4                           jsr patch_rom4_end

  156 A:a273  c2 10                              rep #%00010000
  157 A:a275                                     .xl 
  158 A:a275                                    ; -------------------------------
  159 A:a275                                    ; IEEE speed patch

  161 A:a275                                    ; patch target area start
  162 A:a275  a2 20 fe                           ldx #IEEE_PATCH

  164 A:a278                                    ; from http:
  165 A:a278  a9 4c                              lda #$4c
  166 A:a27a  cd d8 f0                           cmp $f0d8              ; is already patched with JMP (e.g. SDCard)
  167 A:a27d  d0 06                              bne nopatch

  169 A:a27f  ac d9 f0                           ldy $f0d9              ; XR/YR is 16 bit, copy over current JMP target to
  170 A:a282  8c a6 a2                           sty jmptarget                ; patch JMP target

  172 A:a285  8d d8 f0                 nopatch   sta $f0d8           ; JMP
  173 A:a288  8e d9 f0                           stx $f0d9              ; 16 bit address

  175 A:a28b  a0 00 00                           ldy #0
  176 A:a28e  b9 9b a2                 pl0       lda PATCH4_0,y
  177 A:a291  95 00                              sta 0,x
  178 A:a293  e8                                 inx 
  179 A:a294  c8                                 iny 
  180 A:a295  c0 0c 00                           cpy #12
  181 A:a298  d0 f4                              bne pl0

  183 A:a29a  60                                 rts 

  185 A:a29b                                    ; this patch code is in itself all relative,
  186 A:a29b                                    ; so not address calculations are needed
  187 A:a29b                           PATCH4_0  .( 
  188 A:a29b  a9 04                              lda #4
  189 A:a29d  38                       l1        sec 
  190 A:a29e  e9 01                              sbc #1
  191 A:a2a0  d0 fb                              bne l1
  192 A:a2a2  ad 40 e8                           lda $e840
  193 A:a2a5                                    jmptarget=*+1
  194 A:a2a5  4c db f0                           jmp $f0db
  195 A:a2a8                                     .) 

  197 A:a2a8                                     .)                    ; end patch_rom4_xl

  199 A:a2a8                                     .xs 

  201 A:a2a8                                    ; --------------------------------------------------------
  202 A:a2a8                                    ; This installs the patches to link the CMDR-DOS into the
  203 A:a2a8                                    ; PET BASIC 4 ROM. It requires that the DOS "rom.bin" is
  204 A:a2a8                                    ; loaded into the bank 7 (14 as value for $e802) at $4000.
  205 A:a2a8                                    ; Also, it must run in the upper half of bank 0, as it
  206 A:a2a8                                    ; switches the lower half to bank 7, to run the dos_init.
  207 A:a2a8                                    ; 
  208 A:a2a8                                    ; It also requires the value of "SDC_COMPANION" to be set
  209 A:a2a8                                    ; to the place in the ROM where to copy the link code.

  211 A:a2a8                                     .( 

  213 A:a2a8                                    ; address of the DOS in DOSBANK
  214 A:a2a8                                    DOS=$4000

  216 A:a2a8                                    ; DOS jumptable
  217 A:a2a8                                    dos_seclstn=DOS+3*0
  218 A:a2a8                                    dos_sectlk=DOS+3*1
  219 A:a2a8                                    dos_iecin=DOS+3*2
  220 A:a2a8                                    dos_iecout=DOS+3*3
  221 A:a2a8                                    dos_untlk=DOS+3*4 ; note: currently no-op
  222 A:a2a8                                    dos_unlsn=DOS+3*5
  223 A:a2a8                                    dos_listn=DOS+3*6
  224 A:a2a8                                    dos_talk=DOS+3*7 ; note: currently same as listn

  226 A:a2a8                                    dos_init=DOS+3*8

  228 A:a2a8                                    ; banking

  231 A:a2a8                                     .assert BANK=$e802,"BANK register incorrectly defined"

  237 A:a2a8                                    DOSBANK=15           ; DOS runs in memory mapped from $078000-$07ffff
  238 A:a2a8                                    BASBANK=0           ; BASIC runs in bank 0

  240 A:a2a8                                    ; variables in BASIC address space

  242 A:a2a8                                    flags=$03fe           ; for testing for now

  244 A:a2a8                                    curdev=$d4           ; current device (unit) number
  245 A:a2a8                                    cursec=$d3           ; current secondary address

  247 A:a2a8                                    status=$96           ; IEEE status

  249 A:a2a8                                    ; DOS bank vars

  251 A:a2a8                                    dos_status=$0287           ; from dos inc/banks.inc

  253 A:a2a8                                    ; constants (flags) - checked for with BVx/BPL/BMI

  255 A:a2a8                                    DOS_TALK=$80
  256 A:a2a8                                    DOS_LISTEN=$40

  258 A:a2a8                                    ; install the patch and binding

  260 A:a2a8                           sdcard_install .( 
  261 A:a2a8  48                                 pha 

  263 A:a2a9  a9 60                              lda #%01100000
  264 A:a2ab  8d 01 e8                           sta $e801              ; make ROM writable

  266 A:a2ae                                    ; copy over the patch into ROM
  267 A:a2ae  a2 eb                              ldx #rompatch_end-rompatch_start
  268 A:a2b0  bd 24 a3                 l0        lda PATCH-1,x
  269 A:a2b3  9d 2f fe                           sta SDC_COMPANION-1,x
  270 A:a2b6  ca                                 dex 
  271 A:a2b7  d0 f7                              bne l0

  273 A:a2b9  a9 4c                              lda #$4c             ; JMP
  274 A:a2bb  a2 30                              ldx #<talk_listn_unlstn
  275 A:a2bd  a0 fe                              ldy #>talk_listn_unlstn
  276 A:a2bf  8d d8 f0                           sta $f0d8              ; note this is called for TALK, LISTEN and UNLISTEN
  277 A:a2c2  8e d9 f0                           stx $f0d9              ; with either $20, $40, or $3F in A (and PHA'd)
  278 A:a2c5  8c da f0                           sty $f0da

  280 A:a2c8  a2 d1                              ldx #<seclstn
  281 A:a2ca  a0 fe                              ldy #>seclstn
  282 A:a2cc  8d 45 f1                           sta $f145
  283 A:a2cf  8e 46 f1                           stx $f146
  284 A:a2d2  8c 47 f1                           sty $f147

  286 A:a2d5  a2 c4                              ldx #<untlk
  287 A:a2d7  a0 fe                              ldy #>untlk
  288 A:a2d9  8d ae f1                           sta $f1ae
  289 A:a2dc  8e af f1                           stx $f1af
  290 A:a2df  8c b0 f1                           sty $f1b0

  292 A:a2e2  a2 f1                              ldx #<iecin
  293 A:a2e4  a0 fe                              ldy #>iecin
  294 A:a2e6  8d c2 f1                           sta $f1c2
  295 A:a2e9  8e c3 f1                           stx $f1c3
  296 A:a2ec  8c c4 f1                           sty $f1c4

  298 A:a2ef  a2 7d                              ldx #<sectlk
  299 A:a2f1  a0 fe                              ldy #>sectlk
  300 A:a2f3  8d 95 f1                           sta $f195
  301 A:a2f6  8e 96 f1                           stx $f196
  302 A:a2f9  8c 97 f1                           sty $f197

  304 A:a2fc  a2 9b                              ldx #<iecout
  305 A:a2fe  a0 fe                              ldy #>iecout
  306 A:a300  8d 9e f1                           sta $f19e
  307 A:a303  8e 9f f1                           stx $f19f
  308 A:a306  8c a0 f1                           sty $f1a0
  309 A:a309  a9 ea                              lda #$ea             ; NOP
  310 A:a30b  8d a1 f1                           sta $f1a1

  312 A:a30e  a9 e0                              lda #%11100000
  313 A:a310  8d 01 e8                           sta $e801              ; write protect ROM

  315 A:a313                                    ; init the DOS

  317 A:a313  68                                 pla                    ; dos unit

  319 A:a314  08                                 php 
  320 A:a315  78                                 sei 
  321 A:a316  a2 0f                              ldx #DOSBANK
  322 A:a318  8e 02 e8                           stx BANK
  323 A:a31b  20 18 40                           jsr dos_init
  324 A:a31e  a9 00                              lda #BASBANK
  325 A:a320  8d 02 e8                           sta BANK
  326 A:a323  28                                 plp 
  327 A:a324  60                                 rts 
  328 A:a325                                     .) 

  330 A:a325                                    ; -------------------------------------------------------
  331 A:a325                                    ; the following code is copied into the ROM and called
  332 A:a325                                    ; from the patches into the IEEE code

  334 A:a325                           PATCH     
  334 A:a325                                    
  335 A:a325                                    ; assemble for ROM address

  337 A:a325                                     *= SDC_COMPANION
  338 A:fe30                           rompatch_start 
  338 A:fe30                                    

  340 A:fe30                                    ; AC is free. It needs to be #$40 when going back
  341 A:fe30                           talk_listn_unlstn .( 
  342 A:fe30  c9 3f                              cmp #$3f
  343 A:fe32  f0 32                              beq unlisten

  345 A:fe34  08                                 php 
  346 A:fe35  da                                 phx 
  347 A:fe36  78                                 sei 
  348 A:fe37  a5 d4                              lda curdev
  349 A:fe39  a2 0f                              ldx #DOSBANK
  350 A:fe3b  8e 02 e8                           stx BANK
  351 A:fe3e  20 15 40                           jsr dos_talk                ; note: DOS currently has same code for talk && listen 
  352 A:fe41  a2 00                              ldx #BASBANK
  353 A:fe43  8e 02 e8                           stx BANK
  354 A:fe46  ba                                 tsx 

  356 A:fe47  ad fe 03                           lda flags
  357 A:fe4a  29 3f                              and #%00111111
  358 A:fe4c  b0 0d                              bcs no_dev
  359 A:fe4e                                    ; move the IEEE TALK/LISTEN commands into right bits for flags
  360 A:fe4e                                     .assert DOS_LISTEN=$40,"check on flag"
  361 A:fe4e                                     .assert DOS_TALK=$80,"check on flag"
  362 A:fe4e  4a                                 lsr                    ; keep C for bit 0 ...
  363 A:fe4f  1d 03 01                           ora $0103,x            ; $40 for talk, $20 for listen
  364 A:fe52  2a                                 rol                    ; ... restore bit 0
  365 A:fe53  8d fe 03                           sta flags
  366 A:fe56  fa                                 plx 
  367 A:fe57  28                                 plp 
  368 A:fe58  68                                 pla                    ; pop TALK/LISTEN flag saved by ROM 
  369 A:fe59  18                                 clc 
  370 A:fe5a  60                                 rts 

  372 A:fe5b  8d fe 03                 no_dev    sta flags
  373 A:fe5e  fa                                 plx 
  374 A:fe5f  28                                 plp 
  375 A:fe60                           orig_unlsn 
  376 A:fe60  ad 40 e8                           lda $e840
  377 A:fe63  4c db f0                           jmp $f0db

  379 A:fe66                           unlisten  
  380 A:fe66                                     .assert DOS_LISTEN=$40,"check on flag"
  381 A:fe66  2c fe 03                           bit flags
  382 A:fe69  50 f5                              bvc orig_unlsn
  383 A:fe6b  08                                 php 
  384 A:fe6c  78                                 sei 
  385 A:fe6d  a9 0f                              lda #DOSBANK
  386 A:fe6f  8d 02 e8                           sta BANK
  387 A:fe72  20 0f 40                           jsr dos_unlsn
  388 A:fe75  a9 00                              lda #BASBANK
  389 A:fe77  8d 02 e8                           sta BANK
  390 A:fe7a  28                                 plp 
  391 A:fe7b  68                                 pla 
  392 A:fe7c  60                                 rts 
  393 A:fe7d                                     .) 

  395 A:fe7d                           sectlk    .( 
  396 A:fe7d                                     .assert DOS_TALK=$80,"check on flag"
  397 A:fe7d  2c fe 03                           bit flags
  398 A:fe80  10 13                              bpl not_dos
  399 A:fe82                           fix_sectalk 
  400 A:fe82  da                                 phx 
  401 A:fe83  08                                 php 
  402 A:fe84  78                                 sei 
  403 A:fe85  a2 0f                              ldx #DOSBANK
  404 A:fe87  8e 02 e8                           stx BANK
  405 A:fe8a  20 03 40                           jsr dos_sectlk
  406 A:fe8d  a2 00                              ldx #BASBANK
  407 A:fe8f  8e 02 e8                           stx BANK
  408 A:fe92  28                                 plp 
  409 A:fe93  fa                                 plx 
  410 A:fe94  60                                 rts 
  411 A:fe95                           not_dos   
  412 A:fe95  20 09 f1                           jsr $f109
  413 A:fe98  4c 98 f1                           jmp $f198
  414 A:fe9b                                     .) 

  416 A:fe9b                           iecout    .( 
  417 A:fe9b                                     .assert DOS_LISTEN=$40,"check on flag"
  418 A:fe9b  2c fe 03                           bit flags
  419 A:fe9e  50 1a                              bvc not_dos
  420 A:fea0  da                                 phx 
  421 A:fea1  08                                 php 
  422 A:fea2  78                                 sei 
  423 A:fea3  a2 0f                              ldx #DOSBANK
  424 A:fea5  8e 02 e8                           stx BANK
  425 A:fea8  20 09 40                           jsr dos_iecout
  426 A:feab  ad 87 02                           lda dos_status
  427 A:feae  a2 00                              ldx #BASBANK
  428 A:feb0  8e 02 e8                           stx BANK
  429 A:feb3  05 96                              ora status
  430 A:feb5  85 96                              sta status
  431 A:feb7  28                                 plp 
  432 A:feb8  fa                                 plx 
  433 A:feb9  60                                 rts 
  434 A:feba                           not_dos   
  435 A:feba  24 a0                              bit $a0
  436 A:febc  30 03                              bmi l1
  437 A:febe  4c a2 f1                           jmp $f1a2
  438 A:fec1  4c a6 f1                 l1        jmp $f1a6
  439 A:fec4                                     .) 

  441 A:fec4                           untlk     .( 
  442 A:fec4                                     .assert DOS_TALK=$80,"check on flag"
  443 A:fec4  2c fe 03                           bit flags
  444 A:fec7  10 01                              bpl not_dos
  445 A:fec9                                    ; no-op
  446 A:fec9  60                                 rts 
  447 A:feca                           not_dos   
  448 A:feca  ad 40 e8                           lda $e840
  449 A:fecd  4c b1 f1                           jmp $f1b1
  450 A:fed0  60                                 rts 
  451 A:fed1                                     .) 

  453 A:fed1                           seclstn   .( 
  454 A:fed1                                     .assert DOS_LISTEN=$40,"check on flag"
  455 A:fed1  2c fe 03                           bit flags
  456 A:fed4  30 ac                              bmi fix_sectalk                ; catch buggy softare calling seclisten instead of sectalk
  457 A:fed6  50 13                              bvc not_dos
  458 A:fed8  da                                 phx 
  459 A:fed9  08                                 php 
  460 A:feda  78                                 sei 
  461 A:fedb  a2 0f                              ldx #DOSBANK
  462 A:fedd  8e 02 e8                           stx BANK
  463 A:fee0  20 00 40                           jsr dos_seclstn
  464 A:fee3  a2 00                              ldx #BASBANK
  465 A:fee5  8e 02 e8                           stx BANK
  466 A:fee8  28                                 plp 
  467 A:fee9  fa                                 plx 
  468 A:feea  60                                 rts 

  470 A:feeb  20 09 f1                 not_dos   jsr $f109
  471 A:feee  4c 48 f1                           jmp $f148
  472 A:fef1                                     .) 

  474 A:fef1                           iecin     .( 
  475 A:fef1                                     .assert DOS_TALK=$80,"check on flag"
  476 A:fef1  2c fe 03                           bit flags
  477 A:fef4  10 1f                              bpl not_dos
  478 A:fef6  08                                 php 
  479 A:fef7  da                                 phx 
  480 A:fef8  5a                                 phy 
  481 A:fef9  78                                 sei 
  482 A:fefa  a2 0f                              ldx #DOSBANK
  483 A:fefc  8e 02 e8                           stx BANK
  484 A:feff  20 06 40                           jsr dos_iecin
  485 A:ff02  ac 87 02                           ldy dos_status
  486 A:ff05  a2 00                              ldx #BASBANK
  487 A:ff07  8e 02 e8                           stx BANK
  488 A:ff0a  48                                 pha 
  489 A:ff0b  98                                 tya 
  490 A:ff0c  05 96                              ora status
  491 A:ff0e  85 96                              sta status
  492 A:ff10  68                                 pla 
  493 A:ff11  7a                                 ply 
  494 A:ff12  fa                                 plx 
  495 A:ff13  28                                 plp 
  496 A:ff14  60                                 rts 
  497 A:ff15                           not_dos   
  498 A:ff15  8d 21 e8                           sta $e821
  499 A:ff18  4c c5 f1                           jmp $f1c5
  500 A:ff1b                                     .) 

  503 A:ff1b                           rompatch_end 
  503 A:ff1b                                    

  505 A:ff1b                                    ; fix up PC 
  506 A:ff1b                                     *= PATCH+(rompatch_end-rompatch_start)

  508 A:a410                                     .) 

patch4.a65


   28 A:a410                                    PATCH1=$fd60           ; extra code
   29 A:a410                                    PATCH1END=$ff80
   30 A:a410                                    PATCH2=$ffed           ; jmp table 1
   31 A:a410                                    PATCH3=$ffd5           ; jmp table 2
   32 A:a410                                    PATCH4=$ff81           ; jmp table 3

   34 A:a410                                    IOBASE=$e800

   36 A:a410                                    curdev=$d4           ; current device number

   38 A:a410                                    CHRGOT=$76
   39 A:a410                                    CHRGET=$70
   40 A:a410                                    EVALBYTE=$c8d4

   59 A:a410                                     .( 

   61 A:a410                           patch_rom4_init .( 
   62 A:a410  78                                 sei 
   63 A:a411  a9 00                              lda #0             ; write-enable all ROMs
   64 A:a413  8d 01 e8                           sta $e801
   65 A:a416  20 4b a4                           jsr patch_in_code
   66 A:a419  60                                 rts 
   67 A:a41a                                     .) 

   69 A:a41a                           patch_rom4_end .( 
   70 A:a41a  a9 f0                              lda #$f0             ; write protect all ROMs
   71 A:a41c  8d 01 e8                           sta $e801
   72 A:a41f  58                                 cli 
   73 A:a420  60                                 rts 
   74 A:a421                                     .) 

   76 A:a421                           patch_kernal4 .( 
   77 A:a421                                    ; clear out the jump table from unrelated BASIC jumps
   78 A:a421                                    ; Note that those are referenced in the BASIC token 
   79 A:a421                                    ; list, so we need to patch in address minus 1
   80 A:a421  20 57 a4                           jsr patch_in_jmptbl

   82 A:a424                                    ; remove the page FF jmp table entries that are only used from
   83 A:a424                                    ; BASIC
   84 A:a424  20 c9 a4                           jsr free_dosjmps

   86 A:a427                                    ; remove a timer adjustment seemingly left over from 
   87 A:a427                                    ; BASIC1/2 where the 16640 screen cycle clock was adjusted
   88 A:a427                                    ; to be closer to 60 Hz.
   89 A:a427                                    ; This also frees zeropage location $99/$9a
   90 A:a427  20 bc a4                           jsr remove_timerfix

   92 A:a42a                                    ; pass all calls to STOP through FFE1
   93 A:a42a  20 79 a4                           jsr use_jmptable_stop

   95 A:a42d                                    ; link in check for STOP in IEEE
   96 A:a42d  20 3b a4                           jsr link_ieee_stop

   98 A:a430                                    ; add missing ATN disable
   99 A:a430                                    ;jsr disable_atn

  101 A:a430  60                                 rts 
  102 A:a431                                     .) 

  104 A:a431                           patch_basic4 .( 
  105 A:a431                                    ; convenience: remove check for D drive parameters
  106 A:a431                                    ; being 0/1 only.
  107 A:a431  20 b1 a4                           jsr remove_d01_check

  109 A:a434                                    ; convenience: ignore extra characters after filename
  110 A:a434                                    ; in disk basic commands
  111 A:a434  20 a6 a4                           jsr ignore_after_filename

  113 A:a437                                    ; convenience: allow consecutive bytes in POKE command
  114 A:a437  20 96 a4                           jsr set_poke
  115 A:a43a  60                                 rts 
  116 A:a43b                                     .) 

  118 A:a43b                                    ; -------------------------------------------------------------- 
  119 A:a43b                                    ; in some cases ATN is active after a STOP, which prevents
  120 A:a43b                                    ; USB from being used
  121 A:a43b                                    ;disable_atn .(
  122 A:a43b                                    ; lda #$20 ; JSR
  123 A:a43b                                    ; ldx #<lf2b8
  124 A:a43b                                    ; ldy #>lf2b8
  125 A:a43b                                    ; sta $f2b8
  126 A:a43b                                    ; stx $f2b9
  127 A:a43b                                    ; sty $f2ba
  128 A:a43b                                    ; lda #$ea ; NOP
  129 A:a43b                                    ; sta $f2bb
  130 A:a43b                                    ; rts
  131 A:a43b                                    ; .)

  133 A:a43b                                    ; -------------------------------------------------------------- 
  134 A:a43b                                    ; link in check for STOP in IEEE
  135 A:a43b                           link_ieee_stop .( 
  136 A:a43b  a2 20                              ldx #$20             ; JSR
  137 A:a43d  a9 68                              lda #<lf11e
  138 A:a43f  a0 fd                              ldy #>lf11e
  139 A:a441  8e 1e f1                           stx $f11e
  140 A:a444  8d 1f f1                           sta $f11f
  141 A:a447  8c 20 f1                           sty $f120
  142 A:a44a  60                                 rts 
  143 A:a44b                                     .) 

  145 A:a44b                                    ; -------------------------------------------------------------- 
  146 A:a44b                                    ; patch in extra code
  147 A:a44b                           patch_in_code .( 
  148 A:a44b  a0 80                              ldy #patch1len
  149 A:a44d  b9 a5 a5                 l1        lda patch1code-1,y
  150 A:a450  99 5f fd                           sta PATCH1-1,y
  151 A:a453  88                                 dey 
  152 A:a454  d0 f7                              bne l1
  153 A:a456  60                                 rts 
  154 A:a457                                     .) 

  156 A:a457                           patch_in_jmptbl .( 
  157 A:a457  a0 09                              ldy #patch2len
  158 A:a459  b9 25 a6                 l2        lda patch2code-1,y
  159 A:a45c  99 ec ff                           sta PATCH2-1,y
  160 A:a45f  88                                 dey 
  161 A:a460  d0 f7                              bne l2

  163 A:a462  a0 0c                              ldy #patch3len
  164 A:a464  b9 2e a6                 l3        lda patch3code-1,y
  165 A:a467  99 d4 ff                           sta PATCH3-1,y
  166 A:a46a  88                                 dey 
  167 A:a46b  d0 f7                              bne l3

  169 A:a46d  a0 45                              ldy #patch4len
  170 A:a46f  b9 3a a6                 l4        lda patch4code-1,y
  171 A:a472  99 80 ff                           sta PATCH4-1,y
  172 A:a475  88                                 dey 
  173 A:a476  d0 f7                              bne l4

  175 A:a478  60                                 rts 
  176 A:a479                                     .) 

  178 A:a479                                    ; -------------------------------------------------------------- 
  179 A:a479                                    ; pass all calls to STOP through FFE1
  180 A:a479                           use_jmptable_stop .( 
  181 A:a479  a9 e1                              lda #<$ffe1
  182 A:a47b  a0 ff                              ldy #>$ffe1

  184 A:a47d  8d 57 f1                           sta $f157
  185 A:a480  8c 58 f1                           sty $f158

  187 A:a483  8d 61 f1                           sta $f161
  188 A:a486  8c 62 f1                           sty $f162

  190 A:a489  8d 96 f3                           sta $f396
  191 A:a48c  8c 97 f3                           sty $f397

  193 A:a48f  8d 22 f7                           sta $f722
  194 A:a492  8c 23 f7                           sty $f723

  196 A:a495  60                                 rts 
  197 A:a496                                     .) 

  199 A:a496                                    ; -------------------------------------------------------------- 
  200 A:a496                                    ; convenience: consecutive bytes in POKE
  201 A:a496                           set_poke  .( 
  202 A:a496  a9 4c                              lda #$4c
  203 A:a498  8d 60 c9                           sta $c960
  204 A:a49b  a9 c4                              lda #<XPOKE
  205 A:a49d  8d 61 c9                           sta $c961
  206 A:a4a0  a9 fd                              lda #>XPOKE
  207 A:a4a2  8d 62 c9                           sta $c962
  208 A:a4a5  60                                 rts 
  209 A:a4a6                                     .) 

  211 A:a4a6                                    ; -------------------------------------------------------------- 
  212 A:a4a6                                    ; convenience: ignore extra characters after filename
  213 A:a4a6                                    ; in disk basic commands
  214 A:a4a6                           ignore_after_filename .( 

  216 A:a4a6                                    ; change the JMP at $ddb3 from syntax error to end of line handling
  217 A:a4a6                                    EOL=$dd03
  218 A:a4a6  a9 03                              lda #<EOL
  219 A:a4a8  8d b4 dd                           sta $ddb4
  220 A:a4ab  a9 dd                              lda #>EOL
  221 A:a4ad  8d b5 dd                           sta $ddb5
  222 A:a4b0  60                                 rts 
  223 A:a4b1                                     .) 

  225 A:a4b1                                    ; -------------------------------------------------------------- 
  226 A:a4b1                                    ; convenience: remove check for D drive parameters
  227 A:a4b1                                    ; being 0/1 only.
  228 A:a4b1                           remove_d01_check .( 

  230 A:a4b1                                    ; remove the check and branch at $dd1f-dd23
  231 A:a4b1  a9 ea                              lda #$ea             ; NOP
  232 A:a4b3  a0 04                              ldy #$dd23-$dd1f
  233 A:a4b5  99 1e dd                 l         sta $dd1e,y
  234 A:a4b8  88                                 dey 
  235 A:a4b9  d0 fa                              bne l
  236 A:a4bb  60                                 rts 
  237 A:a4bc                                     .) 

  239 A:a4bc                                    ; -------------------------------------------------------------- 
  240 A:a4bc                                    ; remove a timer adjustment seemingly left over from 
  241 A:a4bc                                    ; BASIC1/2 where the 16640 screen cycle clock was adjusted
  242 A:a4bc                                    ; to be closer to 60 Hz.
  243 A:a4bc                                    ; This also frees zeropage location $99/$9a
  244 A:a4bc                           remove_timerfix .( 

  246 A:a4bc                                    ; remove the counter code on $f768-$f779
  247 A:a4bc  a9 ea                              lda #$ea             ; NOP
  248 A:a4be  a0 12                              ldy #$f77a-$f768
  249 A:a4c0                           l1                         ; sta $f767,y
  250 A:a4c0  88                                 dey 
  251 A:a4c1  d0 fd                              bne l1

  253 A:a4c3                                    ; also remove the counter reset at $f799-$f7a0
  254 A:a4c3  a0 07                              ldy #$f7a0-$f799
  255 A:a4c5                           l2                         ; sta $f798,y
  256 A:a4c5  88                                 dey 
  257 A:a4c6  d0 fd                              bne l2
  258 A:a4c8  60                                 rts 
  259 A:a4c9                                     .) 

  261 A:a4c9                                    ; -------------------------------------------------------------- 
  262 A:a4c9                                    ; remove the page FF jmp table entries that are only used from
  263 A:a4c9                                    ; BASIC

  265 A:a4c9                           free_dosjmps .( 

  267 A:a4c9                                    TOKADDR=$b000

  269 A:a4c9                                    ; ------------------
  270 A:a4c9                                    ; $48-$65 can actually be updated as/from a table

  272 A:a4c9                                    ; CONCAT
  273 A:a4c9                                    ; FF93 JMP DAC7
  274 A:a4c9                                    CONCAT=$dac7
  275 A:a4c9  a9 c6                              lda #<CONCAT-1
  276 A:a4cb  8d 48 b0                           sta TOKADDR+$48
  277 A:a4ce  a9 da                              lda #>CONCAT-1
  278 A:a4d0  8d 49 b0                           sta TOKADDR+$49

  280 A:a4d3                                    ; DOPEN
  281 A:a4d3                                    ; FF95 JMP D942
  282 A:a4d3                                    DOPEN=$d942
  283 A:a4d3  a9 41                              lda #<DOPEN-1
  284 A:a4d5  8d 4a b0                           sta TOKADDR+$4a
  285 A:a4d8  a9 d9                              lda #>DOPEN-1
  286 A:a4da  8d 4b b0                           sta TOKADDR+$4b

  288 A:a4dd                                    ; DCLOSE
  289 A:a4dd                                    ; FF99 JMP DA07
  290 A:a4dd                                    DCLOSE=$da07
  291 A:a4dd  a9 06                              lda #<DCLOSE-1
  292 A:a4df  8d 4c b0                           sta TOKADDR+$4c
  293 A:a4e2  a9 da                              lda #>DCLOSE-1
  294 A:a4e4  8d 4d b0                           sta TOKADDR+$4d

  296 A:a4e7                                    ; RECORD
  297 A:a4e7                                    ; FF9C JMP D7AF
  298 A:a4e7                                    RECORD=$d7af
  299 A:a4e7  a9 ae                              lda #<RECORD-1
  300 A:a4e9  8d 4e b0                           sta TOKADDR+$4e
  301 A:a4ec  a9 d7                              lda #>RECORD-1
  302 A:a4ee  8d 4f b0                           sta TOKADDR+$4f

  304 A:a4f1                                    ; HEADER
  305 A:a4f1                                    ; FF9F JMP D9D2
  306 A:a4f1                                    HEADER=$d9d2
  307 A:a4f1  a9 d1                              lda #<HEADER-1
  308 A:a4f3  8d 50 b0                           sta TOKADDR+$50
  309 A:a4f6  a9 d9                              lda #>HEADER-1
  310 A:a4f8  8d 51 b0                           sta TOKADDR+$51

  312 A:a4fb                                    ; COLLECT
  313 A:a4fb                                    ; FFA2 JMP DA65
  314 A:a4fb                                    COLLECT=$da65
  315 A:a4fb  a9 64                              lda #<COLLECT-1
  316 A:a4fd  8d 52 b0                           sta TOKADDR+$52
  317 A:a500  a9 da                              lda #>COLLECT-1
  318 A:a502  8d 53 b0                           sta TOKADDR+$53

  320 A:a505                                    ; BACKUP
  321 A:a505                                    ; FFA5 JMP DA7E
  322 A:a505                                    BACKUP=$da7e
  323 A:a505  a9 7d                              lda #<BACKUP-1
  324 A:a507  8d 54 b0                           sta TOKADDR+$54
  325 A:a50a  a9 da                              lda #>BACKUP-1
  326 A:a50c  8d 55 b0                           sta TOKADDR+$55

  328 A:a50f                                    ; COPY
  329 A:a50f                                    ; FFA8 JMP DAA7
  330 A:a50f                                    COPY=$daa7
  331 A:a50f  a9 a6                              lda #<COPY-1
  332 A:a511  8d 56 b0                           sta TOKADDR+$56
  333 A:a514  a9 da                              lda #>COPY-1
  334 A:a516  8d 57 b0                           sta TOKADDR+$57

  336 A:a519                                    ; APPEND
  337 A:a519                                    ; FFAB JMP D977
  338 A:a519                                    APPEND=$d977
  339 A:a519  a9 76                              lda #<APPEND-1
  340 A:a51b  8d 58 b0                           sta TOKADDR+$58
  341 A:a51e  a9 d9                              lda #>APPEND-1
  342 A:a520  8d 59 b0                           sta TOKADDR+$59

  344 A:a523                                    ; DSAVE
  345 A:a523                                    ; FFAE JMP DB0D
  346 A:a523                                    DSAVE=$db0d
  347 A:a523  a9 0c                              lda #<DSAVE-1
  348 A:a525  8d 5a b0                           sta TOKADDR+$5a
  349 A:a528  a9 db                              lda #>DSAVE-1
  350 A:a52a  8d 5b b0                           sta TOKADDR+$5b

  352 A:a52d                                    ; DLOAD
  353 A:a52d                                    ; FFB1 JMP DB3A
  354 A:a52d                                    DLOAD=$db3a
  355 A:a52d  a9 39                              lda #<DLOAD-1
  356 A:a52f  8d 5c b0                           sta TOKADDR+$5c
  357 A:a532  a9 db                              lda #>DLOAD-1
  358 A:a534  8d 5d b0                           sta TOKADDR+$5d

  360 A:a537                                    ; DIRECTORY
  361 A:a537                                    ; FFB4 JMP D873
  362 A:a537                                    DIRECTORY=$d873
  363 A:a537                                    ; CATALOG
  364 A:a537  a9 72                              lda #<DIRECTORY-1
  365 A:a539  8d 5e b0                           sta TOKADDR+$5e
  366 A:a53c  a9 d8                              lda #>DIRECTORY-1
  367 A:a53e  8d 5f b0                           sta TOKADDR+$5f
  368 A:a541                                    ; DIRECTORY
  369 A:a541  a9 72                              lda #<DIRECTORY-1
  370 A:a543  8d 64 b0                           sta TOKADDR+$64
  371 A:a546  a9 d8                              lda #>DIRECTORY-1
  372 A:a548  8d 65 b0                           sta TOKADDR+$65

  374 A:a54b                                    ; RENAME
  375 A:a54b                                    ; FFB7 JMP DB55
  376 A:a54b                                    RENAME=$db55
  377 A:a54b  a9 54                              lda #<RENAME-1
  378 A:a54d  8d 60 b0                           sta TOKADDR+$60
  379 A:a550  a9 db                              lda #>RENAME-1
  380 A:a552  8d 61 b0                           sta TOKADDR+$61

  382 A:a555                                    ; SCRATCH
  383 A:a555                                    ; FFBA JMP DB66
  384 A:a555                                    SCRATCH=$db66
  385 A:a555  a9 65                              lda #<SCRATCH-1
  386 A:a557  8d 62 b0                           sta TOKADDR+$62
  387 A:a55a  a9 db                              lda #>SCRATCH-1
  388 A:a55c  8d 63 b0                           sta TOKADDR+$63

  391 A:a55f                                    ;------

  393 A:a55f                                    ; LOAD
  394 A:a55f                                    ; FFD5 JMP F401
  395 A:a55f                                    XLOAD=$f401
  396 A:a55f  a9 00                              lda #<XLOAD-1
  397 A:a561  8d 26 b0                           sta TOKADDR+$26
  398 A:a564  a9 f4                              lda #>XLOAD-1
  399 A:a566  8d 27 b0                           sta TOKADDR+$27

  401 A:a569                                    ; SAVE
  402 A:a569                                    ; FFD8 JMP F6DD
  403 A:a569                                    XSAVE=$f6dd
  404 A:a569  a9 dc                              lda #<XSAVE-1
  405 A:a56b  8d 28 b0                           sta TOKADDR+$28
  406 A:a56e  a9 f6                              lda #>XSAVE-1
  407 A:a570  8d 29 b0                           sta TOKADDR+$29

  409 A:a573                                    ; VERIFY
  410 A:a573                                    ; FFDB JMP F4F6
  411 A:a573                                    VERIFY=$f4f6
  412 A:a573  a9 f5                              lda #<VERIFY-1
  413 A:a575  8d 2a b0                           sta TOKADDR+$2a
  414 A:a578  a9 f4                              lda #>VERIFY-1
  415 A:a57a  8d 2b b0                           sta TOKADDR+$2b

  417 A:a57d                                    ;------

  419 A:a57d                                    ; SYS
  420 A:a57d                                    ; FFDE JMP F6C3
  421 A:a57d                                    SYS=$f6c3
  422 A:a57d  a9 c2                              lda #<SYS-1
  423 A:a57f  8d 3c b0                           sta TOKADDR+$3c
  424 A:a582  a9 f6                              lda #>SYS-1
  425 A:a584  8d 3d b0                           sta TOKADDR+$3d

  427 A:a587                                    ; OPEN
  428 A:a587                                    ; FFC0 JMP F560
  429 A:a587                                    OPEN=$f560
  430 A:a587  a9 5f                              lda #<OPEN-1
  431 A:a589  8d 3e b0                           sta TOKADDR+$3e
  432 A:a58c  a9 f5                              lda #>OPEN-1
  433 A:a58e  8d 3f b0                           sta TOKADDR+$3f

  435 A:a591                                    ; CLOSE
  436 A:a591                                    ; FFC3 JMP F2DD
  437 A:a591                                    CLOSE=$f2e0
  438 A:a591  a9 df                              lda #<CLOSE-1
  439 A:a593  8d 40 b0                           sta TOKADDR+$40
  440 A:a596  a9 f2                              lda #>CLOSE-1
  441 A:a598  8d 41 b0                           sta TOKADDR+$41

  443 A:a59b                                    ;------

  445 A:a59b                                    ; unknown JMP
  446 A:a59b                                    ; FFBD JMP D995
  447 A:a59b                                    UNKNOWN=$d995
  448 A:a59b  a9 95                              lda #<UNKNOWN
  449 A:a59d  8d 01 c0                           sta $c001
  450 A:a5a0  a9 d9                              lda #>UNKNOWN
  451 A:a5a2  8d 02 c0                           sta $c002

  453 A:a5a5                                    ;------

  467 A:a5a5  60                                 rts 
  468 A:a5a6                                     .) 

  471 A:a5a6                                    ; extra code to be patched in
  472 A:a5a6                                    ; is located after kernal proper,
  473 A:a5a6                                    ; but before the kernal jump table
  474 A:a5a6                           patch1code 
  475 A:a5a6                                     *= PATCH1

  477 A:fd60                                    ; disable ATN on CLRCHN anyway
  478 A:fd60                           lf2b8     .( 
  479 A:fd60  20 48 f1                           jsr $f148
  480 A:fd63  a9 03                              lda #$03
  481 A:fd65  85 b0                              sta $b0
  482 A:fd67  60                                 rts 
  483 A:fd68                                     .) 

  485 A:fd68                                    ; slice in check for STOP key when waiting for IEEE
  486 A:fd68                           lf11e     .( 
  487 A:fd68  20 e1 ff                           jsr $ffe1              ; check stop key
  488 A:fd6b  f0 04                              beq stop
  489 A:fd6d  2c 40 e8                           bit $e840
  490 A:fd70  60                                 rts 
  491 A:fd71  68                       stop      pla 
  492 A:fd72  68                                 pla 
  493 A:fd73  4c 65 f1                           jmp $f165
  494 A:fd76                                     .) 
  495 A:fd76                           Lf1d7     

  497 A:fd76                                    ; get number of screen COLs in X and number of lines in Y
  498 A:fd76                           lFFED     .( 
  499 A:fd76  a2 28                              ldx #40             ; TODO: check for 40/80
  500 A:fd78  a0 19                              ldy #25
  501 A:fd7a  60                                 rts 
  502 A:fd7b                                     .) 

  504 A:fd7b                                    ; set (C=0) or get (C=1) the current cursor position in X/Y registers
  505 A:fd7b                                    ;lFFF0 .(
  506 A:fd7b                                    ; .)

  508 A:fd7b                                    ; get address of I/O area in X (lo)/Y (hi)
  509 A:fd7b                           lFFF3     .( 
  510 A:fd7b  a2 00                              ldx #<IOBASE
  511 A:fd7d  a0 e8                              ldy #>IOBASE
  512 A:fd7f  60                                 rts 
  513 A:fd80                                     .) 

  515 A:fd80                                    ; change semantics. C64 has DEV# in AC, PET expects it in curdev
  516 A:fd80                                    ;jmp $f0d5 ; LISTEN IEEE LISTEN
  517 A:fd80                                    ;jmp $f0d2 ; TALK  IEEE TALK
  518 A:fd80                           TALK      .( 
  519 A:fd80  85 d4                              sta curdev
  520 A:fd82  4c d2 f0                           jmp $f0d2
  521 A:fd85                                     .) 

  523 A:fd85                           LISTEN    .( 
  524 A:fd85  85 d4                              sta curdev
  525 A:fd87  4c d5 f0                           jmp $f0d5
  526 A:fd8a                                     .) 

  528 A:fd8a                           READST                     ; read I/O status
  529 A:fd8a                                     .( 
  530 A:fd8a  a5 96                              lda $96
  531 A:fd8c  60                                 rts 
  532 A:fd8d                                     .) 

  534 A:fd8d                           SETLFS                     ; SETLFS set logical/first/second address
  535 A:fd8d                                     .( 
  536 A:fd8d  85 d2                              sta $d2              ; logical file no
  537 A:fd8f  86 d4                              stx $d4              ; unit address
  538 A:fd91  84 d3                              sty $d3              ; secondary address
  539 A:fd93  60                                 rts 
  540 A:fd94                                     .) 

  542 A:fd94                           SETNAM                     ; SETNAM set filename
  543 A:fd94                                     .( 
  544 A:fd94  85 d1                              sta $d1              ; filename length
  545 A:fd96  86 da                              stx $da              ; address low
  546 A:fd98  84 db                              sty $db              ; address high
  547 A:fd9a  60                                 rts 
  548 A:fd9b                                     .) 

  550 A:fd9b                                    ; TODO: will always load to address from file
  551 A:fd9b                                    ; not like the C64 load at BASIC start and only ,1 to file address
  552 A:fd9b                           LOAD                       ; LOAD  load
  553 A:fd9b                                     .( 
  554 A:fd9b  86 fb                              stx $fb              ; start lo
  555 A:fd9d  84 fc                              sty $fc              ; start hi
  556 A:fd9f  85 9d                              sta $9d              ; load/verify flag
  557 A:fda1  4c 56 f3                           jmp $f356
  558 A:fda4                                     .) 

  560 A:fda4                           SAVE                       ; SAVE  save
  561 A:fda4                                     .( 
  562 A:fda4  86 c9                              stx $c9              ; end lo 
  563 A:fda6  84 ca                              sty $ca              ; end hi
  564 A:fda8  aa                                 tax                    ; pointer to zp location for start
  565 A:fda9  b5 00                              lda $00,x
  566 A:fdab  85 c7                              sta $c7              ; start lo
  567 A:fdad  b5 01                              lda $01,x
  568 A:fdaf  85 c8                              sta $c8              ; start hi
  569 A:fdb1  4c e3 f6                           jmp $f6e3
  570 A:fdb4                                     .) 

  572 A:fdb4                           RDTIM                      ; RDTIM  get time
  573 A:fdb4                                     .( 
  574 A:fdb4  78                                 sei 
  575 A:fdb5  a5 8f                              lda $8f
  576 A:fdb7  a6 8e                              ldx $8e
  577 A:fdb9  a4 8d                              ldy $8d
  578 A:fdbb                                    ; fall-through
  579 A:fdbb                                     .) 
  580 A:fdbb                           SETTIM                     ; SETTIM set time
  581 A:fdbb                                     .( 
  582 A:fdbb  78                                 sei 
  583 A:fdbc  85 8f                              sta $8f
  584 A:fdbe  86 8e                              stx $8e
  585 A:fdc0  84 8d                              sty $8d
  586 A:fdc2  58                                 cli 
  587 A:fdc3  60                                 rts 
  588 A:fdc4                                     .) 

  590 A:fdc4                                    ; extend POKE to accept multiple values poked to 
  591 A:fdc4                                    ; consecutive memory locations
  592 A:fdc4                           XPOKE     .( 
  593 A:fdc4                                    ; jmp from $c960
  594 A:fdc4  91 11                    l0        sta ($11),y
  595 A:fdc6  20 76 00                           jsr CHRGOT
  596 A:fdc9  c9 2c                              cmp #","
  597 A:fdcb  d0 11                              bne pe
  598 A:fdcd  e6 11                              inc $11
  599 A:fdcf  d0 02                              bne l1
  600 A:fdd1  e6 12                              inc $12
  601 A:fdd3  20 70 00                 l1        jsr CHRGET
  602 A:fdd6  20 d4 c8                           jsr EVALBYTE
  603 A:fdd9  8a                                 txa 
  604 A:fdda  a0 00                              ldy #0
  605 A:fddc  f0 e6                              beq l0
  606 A:fdde  60                       pe        rts 
  607 A:fddf                                     .) 

  609 A:fddf                           lFF84                      ; IOINIT init all other I/O
  610 A:fddf                           lFF87                      ; RAMTAS RAM test and find end of RAM
  611 A:fddf                           lFF8A                      ; RESTOR restore default vectors
  612 A:fddf                           lFF8D                      ; VECTOR read/set vectored I/O
  613 A:fddf                           lFF90                      ; SETMSG control kernal messages
  614 A:fddf                           lFF99                      ; MEMTOP read/set top of RAM
  615 A:fddf                           lFF9C                      ; MEMBOT read/set bottom of RAM
  616 A:fddf                           lFFA2                      ; SETTMO set IEEE timeout
  617 A:fddf                           lFFF0                      ; PLOT  set/get current cursor position
  618 A:fddf  60                                 rts 

  620 A:fde0                                     .assert *<PATCH1END,"extra code too long"
  621 A:fde0                                    patch1len=*-PATCH1
  622 A:fde0                                     *= patch1code+patch1len

  624 A:a626                                    ; ---------------------------------------
  625 A:a626                                    ; jmp table 1
  626 A:a626                           patch2code 
  627 A:a626                                     *= PATCH2                ; $ffed
  628 A:ffed  4c 76 fd                           jmp lFFED                ; SCREEN
  629 A:fff0  4c df fd                           jmp lFFF0                ; PLOT
  630 A:fff3  4c 7b fd                           jmp lFFF3                ; IOBASE
  631 A:fff6                                    patch2len=*-PATCH2
  632 A:fff6                                     *= patch2code+patch2len

  634 A:a62f                                    ; ---------------------------------------
  635 A:a62f                                    ; jmp table 2
  636 A:a62f                           patch3code 
  637 A:a62f                                     *= PATCH3                ; $ffd5 
  638 A:ffd5  4c 9b fd                           jmp LOAD                ; LOAD  load
  639 A:ffd8  4c a4 fd                           jmp SAVE                ; SAVE  save
  640 A:ffdb  4c bb fd                           jmp SETTIM                ; SETTIM set time
  641 A:ffde  4c b4 fd                           jmp RDTIM                ; RDTIM  get time
  642 A:ffe1                                    patch3len=*-PATCH3
  643 A:ffe1                                     *= patch3code+patch3len

  645 A:a63b                                    ; ---------------------------------------
  646 A:a63b                           patch4code 
  647 A:a63b                                     *= PATCH4                ; $ff81
  648 A:ff81  4c 00 e0                           jmp $e000              ; CINT   video reset
  649 A:ff84  4c df fd                           jmp lFF84                ; IOINIT init all other I/O
  650 A:ff87  4c df fd                           jmp lFF87                ; RAMTAS RAM test and find end of RAM
  651 A:ff8a  4c df fd                           jmp lFF8A                ; RESTOR restore default vectors
  652 A:ff8d  4c df fd                           jmp lFF8D                ; VECTOR read/set vectored I/O
  653 A:ff90  4c df fd                           jmp lFF90                ; SETMSG control kernal messages
  654 A:ff93  4c 43 f1                           jmp $f143              ; SECLSTN IEEE secondary listen address
  655 A:ff96  4c 93 f1                           jmp $f193              ; SECTALK IEEE secondary talk address
  656 A:ff99  4c df fd                           jmp lFF99                ; MEMTOP read/set top of RAM
  657 A:ff9c  4c df fd                           jmp lFF9C                ; MEMBOT read/set bottom of RAM
  658 A:ff9f  4c 27 e0                           jmp $e027              ; SCNKEY scan keyboard
  659 A:ffa2  4c df fd                           jmp lFFA2                ; SETTMO set IEEE timeout
  660 A:ffa5  4c c0 f1                           jmp $f1c0              ; IECIN  get byte from IEEE
  661 A:ffa8  4c 9e f1                           jmp $f19e              ; IECOUT send byte to IEEE
  662 A:ffab  4c ae f1                           jmp $f1ae              ; UNTALK IEEE UNTALK
  663 A:ffae  4c b9 f1                           jmp $f1b9              ; UNLSTN IEEE UNLISTEN
  664 A:ffb1  4c 85 fd                           jmp LISTEN                ; LISTEN IEEE LISTEN
  665 A:ffb4  4c 80 fd                           jmp TALK                ; TALK  IEEE TALK
  666 A:ffb7  4c 8a fd                           jmp READST                ; READST read I/O status
  667 A:ffba  4c 8d fd                           jmp SETLFS                ; SETLFS set logical/first/second address
  668 A:ffbd  4c 94 fd                           jmp SETNAM                ; SETNAM set filename
  669 A:ffc0  4c 63 f5                           jmp $f563              ; OPEN  open a file after using SETLFS/SETNAM
  670 A:ffc3  4c e2 f2                           jmp $f2e2              ; CLOSE  close a file, LFN in AC
  671 A:ffc6                                    patch4len=*-PATCH4
  672 A:ffc6                                     *= patch4code+patch4len

  674 A:a680                                     .) 

boot_rom4.a65


usb65/platforms/upet/petrom_install.a65


   32 A:a680                                    ;------------------------------------------------
   33 A:a680                                    ; install the USB code
   34 A:a680                           usb_install .( 
   35 A:a680  a9 0f                              lda #<newirq
   36 A:a682  a2 df                              ldx #>newirq
   37 A:a684  a0 00                              ldy #0             ; lock value to set

   39 A:a686                                    ; set interrupt addr from a/x
   40 A:a686  08                                 php 
   41 A:a687  78                                 sei 

   43 A:a688  48                                 pha 

   45 A:a689  98                                 tya 
   46 A:a68a  8f ff 00 07                        sta lock

   48 A:a68e  a9 00                              lda #0
   49 A:a690  8d 01 e8                           sta $e801              ; make memory writable

   51 A:a693                                    ; x is not modified
   52 A:a693  ad 55 e4                           lda $e455              ; standard interrupt routine
   53 A:a696  c9 4c                              cmp #$4c             ; JMP on some ROMs
   54 A:a698  f0 06                              beq dojmp
   55 A:a69a  a9 56                              lda #<$e456
   56 A:a69c  a0 e4                              ldy #>$e456
   57 A:a69e  d0 07                              bne inject

   59 A:a6a0  ac 57 e4                 dojmp     ldy $e457           ; E455 JMP XXXX ; get address from JMP
   60 A:a6a3  ad 56 e4                           lda $e456
   61 A:a6a6  1a                                 inc                    ; no overflow in current ROM
   62 A:a6a7                           inject    
   63 A:a6a7  8d b2 a6                           sta addr2
   64 A:a6aa  8c b3 a6                           sty addr2+1

   66 A:a6ad  68                                 pla 
   67 A:a6ae  18                                 clc 
   68 A:a6af  24                                 .byt $24
   69 A:a6b0  38                       next2     sec 
   70 A:a6b1                                    addr2=*+1
   71 A:a6b1  8d ff ff                           sta $ffff              ; set from above
   72 A:a6b4  ee b2 a6                           inc addr2
   73 A:a6b7                                    ; no overflow on current ROMs
   74 A:a6b7  8a                                 txa 
   75 A:a6b8  90 f6                              bcc next2

   77 A:a6ba  a9 c0                              lda #%11000000
   78 A:a6bc  8d 01 e8                           sta $e801              ; protect memory $b-fxxx

   80 A:a6bf  28                                 plp 
   81 A:a6c0  60                                 rts 
   82 A:a6c1                                     .) 

   86 A:a6c1                                    ;-------------------------------
   87 A:a6c1                                    ; init the driver in USB bank and check for hardware
   88 A:a6c1                                    ; if returns with C=0, we can install interrupt handler
   89 A:a6c1                           usb_init  .( 
   90 A:a6c1  08                                 php 
   91 A:a6c2  78                                 sei 

   93 A:a6c3  a2 0f                              ldx #MAP_USB
   94 A:a6c5  8e 02 e8                           stx MAPREG

   96 A:a6c8  a9 ff                              lda #<-1
   97 A:a6ca  8f ff 00 07                        sta lock

   99 A:a6ce  20 00 10                           jsr driver_init

  101 A:a6d1  a2 00                              ldx #MAP_BAS
  102 A:a6d3  8e 02 e8                           stx MAPREG

  104 A:a6d6  b0 05                              bcs locked
  105 A:a6d8  28                                 plp 
  106 A:a6d9  18                                 clc 
  107 A:a6da  4c 80 a6                           jmp usb_install

  109 A:a6dd  28                       locked    plp 
  110 A:a6de  38                                 sec 
  111 A:a6df  60                                 rts 
  112 A:a6e0                                     .) 

boot_rom4.a65


  526 A:a6e0                           usbcomp_start 
  527 A:a6e0                                     *= USB_COMPANION
  528 A:df00  4c c1 a6                           jmp usb_init
  529 A:df03  4c 80 a6                           jmp usb_install
  530 A:df06  ea                                 nop 
  530 A:df07  ea                                 nop 
  530 A:df08  ea                                 nop 
  531 A:df09  4c 42 df                           jmp pause
  532 A:df0c  4c 60 df                           jmp printc2

usb65/platforms/upet/petrom_install.a65


  116 A:df0f                                    ;-------------------------------
  117 A:df0f                                    ; new interrupt routine
  118 A:df0f                           newirq    .( 

  120 A:df0f                                    ; do the part we've actually overwritten
  121 A:df0f                                    ; which includes checking for the STOP key.
  122 A:df0f  20 ea ff                           jsr $ffea

  124 A:df12                                    ; The first part is such a BAD HACK(tm)
  125 A:df12                                    ;
  126 A:df12                                    ; After IEC load, the kernal calls F92B, assumingly to check
  127 A:df12                                    ; the RUN/STOP key a last time. But starting from F92E it checks
  128 A:df12                                    ; whether the interrupt vector is set to page $E4xx - and if not,
  129 A:df12                                    ; just loops! One way around this is the following
  130 A:df12                                    ; BAD HACK:
  131 A:df12                                    ; in the interrupt routine, we check whether we have interrupted the
  132 A:df12                                    ; code in just this place, and then forward the RTI address on the
  133 A:df12                                    ; stack such that the check is ignored.
  134 A:df12                                    ; However, it seems there are conditions where this still did not 
  135 A:df12                                    ; trigger. My assumption is that the number of cycles for a screen
  136 A:df12                                    ; (interrupt) is similar to when checking the STOP key in the loop
  137 A:df12                                    ; So, instead, we re-purpose the BRK vector jump, which is at 
  138 A:df12                                    ; $E44F and use the BRK code instead
  139 A:df12                                    ; 
  140 A:df12  ba                                 tsx 

  142 A:df13                                    ;-------------------------------
  143 A:df13                                    ; debug output

  159 A:df13                                    ;-------------------------------
  160 A:df13                                    ; protect IEEE488 
  161 A:df13                                    ; lda $e840
  162 A:df13                                    ; and #$c1 ; NRFDin, NDACin, DAVin
  163 A:df13                                    ; cmp #$c1 ; active? then do not poll, as we might interfere with IEEE488 timing
  164 A:df13                                    ; bne nopoll

  166 A:df13  bd 06 01                           lda $0106,x            ; protect all interrupts in $f0xx-$f3xx
  167 A:df16  29 fc                              and #$fc
  168 A:df18  c9 f0                              cmp #$f0
  169 A:df1a  f0 25                              beq nopoll

  171 A:df1c                                    ;-------------------------------
  172 A:df1c                                    ; check soft lock
  173 A:df1c                                    ; no race condition, we can safely assume to not be interrupted (on single-cpu)

  175 A:df1c  af ff 00 07                        lda lock
  176 A:df20  30 1f                              bmi nopoll

  178 A:df22                                    ;-------------------------------
  179 A:df22                                    ; poll the USB bus
  180 A:df22                           poll      

  190 A:df22  af ff 00 07                        lda lock                ; lock so we don't get into poll again for now; results in $ff
  191 A:df26  3a                                 dec 
  192 A:df27  8f ff 00 07                        sta lock

  194 A:df2b  a9 0f                              lda #MAP_USB
  195 A:df2d  8d 02 e8                           sta MAPREG
  196 A:df30  20 03 10                           jsr driver_poll

  198 A:df33  a9 00                              lda #MAP_BAS
  199 A:df35  8d 02 e8                           sta MAPREG

  201 A:df38  af ff 00 07                        lda lock
  202 A:df3c  1a                                 inc 
  203 A:df3d  8f ff 00 07                        sta lock
  204 A:df41                           nopoll    
  205 A:df41                                    ; return to original IRQ
  206 A:df41  60                                 rts 
  207 A:df42                                     .) 

  211 A:df42                                    ;----------------------------------------------------------------
  212 A:df42                                    ; those callbacks are being called from the driver, i.e. 
  213 A:df42                                    ; actually from within somewhere in the code. We need
  214 A:df42                                    ; to protect the output

  216 A:df42                                    ; pause a given number of vertical screen retraces (1/50th seconds)
  217 A:df42                                    ; in AC has number of frames (retraces)
  218 A:df42                           pause     .( 
  219 A:df42  08                                 php 
  220 A:df43  a2 00                              ldx #MAP_BAS
  221 A:df45  8e 02 e8                           stx MAPREG

  223 A:df48  58                                 cli 
  224 A:df49  aa                                 tax 
  225 A:df4a  e8                                 inx                    ; full retraces, so one more border between traces
  226 A:df4b  af fe 00 07              p0        lda VCOUNT
  227 A:df4f  cf fe 00 07              p1        cmp VCOUNT
  228 A:df53  f0 fa                              beq p1
  229 A:df55  ca                                 dex 
  230 A:df56  d0 f3                              bne p0

  232 A:df58  78                                 sei 
  233 A:df59  a2 0f                              ldx #MAP_USB
  234 A:df5b  8e 02 e8                           stx MAPREG

  236 A:df5e  28                                 plp 
  237 A:df5f  60                                 rts 
  238 A:df60                                     .) 

  242 A:df60                                    ;----------------------------------------------------------------

  246 A:df60                           printc2   .( 
  247 A:df60                                    ; write a char into the key buffer (if not filled already)
  248 A:df60  08                                 php 
  249 A:df61  78                                 sei 
  250 A:df62  da                                 phx 

  252 A:df63  a2 00                              ldx #MAP_BAS
  253 A:df65  8e 02 e8                           stx MAPREG

  255 A:df68  b0 13                              bcs stop

  257 A:df6a  a6 9e                              ldx $9e
  258 A:df6c  e0 09                              cpx #9             ; at $e3 for 80 cols, or $03eb for 40 cols - so use constant 
  259 A:df6e  b0 05                              bcs full
  260 A:df70  9d 6f 02                           sta $026f,x
  261 A:df73  e6 9e                              inc $9e
  262 A:df75                           full      
  263 A:df75  a2 0f                              ldx #MAP_USB
  264 A:df77  8e 02 e8                           stx MAPREG

  266 A:df7a  fa                                 plx 
  267 A:df7b  28                                 plp 
  268 A:df7c  60                                 rts 

  270 A:df7d                                    ;.assert KBD_CB_STOP == 1, "STOP key bit"
  271 A:df7d                           stop      
  272 A:df7d                                    ;inc $8000
  273 A:df7d                                    ;sta $8001
  274 A:df7d  6a                                 ror                    ; check KBD_CB_STOP flag
  275 A:df7e  90 f5                              bcc full
  276 A:df80  a5 9b                              lda STPFL
  277 A:df82  29 ef                              and #$ef
  278 A:df84  85 9b                              sta STPFL
  279 A:df86  80 ed                              bra full
  280 A:df88                                     .) 

boot_rom4.a65

    1 A:df88                                     *= usbcomp_start+*-USB_COMPANION

  541 A:a768                           usbcomp_end 

  543 A:a768                                     .xl 
  544 A:a768                                     .)                    ; end setup_basic4_xl

boot_usb.a65


    2 A:a768                                     .( 

    4 A:a768                                    ;&lock =$0700ff ; last byte in zeropage in bank 7/block 14
    5 A:a768                                    ;&VCOUNT =$0700fe
    6 A:a768                                    ;usbtmp =$0700fd

    8 A:a768                                    MAP_USB=USBBLK
    9 A:a768                                    MAP_BAS=0
   10 A:a768                                    MAPREG=BANK

   12 A:a768                                    USBPAGE=$a0           ; start of driver in Flash ROM

   14 A:a768                                    USBBLK=15           ; bank 7 value for BANK  

   16 A:a768                                    DRIVERADDR=$1000
   17 A:a768                                    COMPADDR=$df00

   19 A:a768                                    driver_init=DRIVERADDR
   20 A:a768                                    driver_poll=DRIVERADDR+3

   22 A:a768                                    pause_ax=COMPADDR+9
   23 A:a768                                    driver_pause_a=DRIVERADDR+6+1
   24 A:a768                                    print_ax=COMPADDR+12
   25 A:a768                                    driver_print_a=DRIVERADDR+9+1

   27 A:a768                                    ; -----------------------                                        
   28 A:a768                                    ; copy over USB code to RAM                                      
   29 A:a768                                    ; $1a000-$1bfff in flash img                                     
   30 A:a768                                    ; copy to DRIVERADDR                                                

   32 A:a768                                     .xl 
   33 A:a768                           setup_usb_xl 
   34 A:a768                                     .( 
   35 A:a768  a9 0f                              lda #MAP_USB               ; for the PET default VICCY base address of $1000 
   36 A:a76a  8d 02 e8                           sta BANK                ; $e802                                           

   38 A:a76d  a9 a0                              lda #USBPAGE               ; page in flash                                  
   39 A:a76f  a2 00 10                           ldx #DRIVERADDR               ; start in current bank                          
   40 A:a772  a0 00 20                           ldy #$2000             ; transfer len                                   
   41 A:a775  20 de 90                           jsr flash2direct2_xl

   43 A:a778                                    ; copy over boot companion
   44 A:a778  a0 0e 00                           ldy #romcompend-romcomp-1
   45 A:a77b  b9 b0 a7                 l         lda romcomp,y
   46 A:a77e  99 00 df                           sta COMPADDR,y
   47 A:a781  88                                 dey 
   48 A:a782  10 f7                              bpl l

   50 A:a784                                    ; link companion and driver
   51 A:a784  a2 09 df                           ldx #pause_ax
   52 A:a787  8e 07 10                           stx driver_pause_a
   53 A:a78a  a2 0c df                           ldx #print_ax
   54 A:a78d  8e 0a 10                           stx driver_print_a

   56 A:a790  e2 10                              sep #%00010000
   57 A:a792                                     .xs 

   59 A:a792  20 c6 a7                           jsr t_init
   60 A:a795  b0 03                              bcs nohw

   62 A:a797  20 bf a7                           jsr t_install

   64 A:a79a                                    ; TODO:                                                          
   65 A:a79a                                    ; 2. init USB, bind into IRQ                                     
   66 A:a79a                                    ; 3. CLI                                                         
   67 A:a79a                                    ; 4. then use USB keyboard in boot menu                          
   68 A:a79a                                    ; 5. SEI                                                         
   69 A:a79a                                    ; 6. set ROMs                                                    
   70 A:a79a                                    ; 7. if USB option set, copy real bind companion to $df00        
   71 A:a79a                                    ; 8. enable USB interrupt handling                               
   72 A:a79a                                    ; 9. switch BANK back to 0 ($20)                                 
   73 A:a79a                                    ; 10. boot into ROM                                              

   75 A:a79a                           nohw      
   76 A:a79a  a9 00                              lda #MAP_BAS
   77 A:a79c  8d 02 e8                           sta BANK

   79 A:a79f  c2 10                              rep #%00010000
   80 A:a7a1                                     .xl 
   81 A:a7a1  60                                 rts 
   82 A:a7a2                                     .) 

   86 A:a7a2                                     .xs 

   88 A:a7a2                           usb_poll  .( 
   89 A:a7a2  a9 0f                              lda #MAP_USB
   90 A:a7a4  8d 02 e8                           sta MAPREG

   92 A:a7a7  20 03 10                           jsr driver_poll

   94 A:a7aa  a9 00                              lda #MAP_BAS
   95 A:a7ac  8d 02 e8                           sta MAPREG
   96 A:a7af  60                                 rts 
   97 A:a7b0                                     .) 

   99 A:a7b0                           romcomp   .( 
  100 A:a7b0                                     *= COMPADDR
  101 A:df00                                    ; ignored
  102 A:df00  4c c6 a7                           jmp t_init                ; init the USB stack               
  103 A:df03  4c bf a7                           jmp t_install                ; patch in USB interrupt into ROM  
  104 A:df06  4c d9 a7                           jmp t_uninstall                ; remove USB patch                 
  105 A:df09                                    ; called from USB driver interrupt routine                         
  106 A:df09  4c e1 a7                 usb_pause jmp t_pause             ;                                  
  107 A:df0c  4c fe a7                 usb_appendkey jmp t_printc2
  108 A:df0f                                     *= *-COMPADDR+romcomp
  109 A:a7bf                                     .) 
  110 A:a7bf                           romcompend 

  112 A:a7bf                           t_install .( 
  113 A:a7bf                                    ; interrupt is already established for key scanning
  114 A:a7bf                                    ; we just need to release the lock
  115 A:a7bf  a9 00                              lda #0
  116 A:a7c1  8f ff 00 07                        sta lock

  118 A:a7c5  60                                 rts 
  119 A:a7c6                                     .) 

  121 A:a7c6                                    ; is entered in MAP_USB, .xs, .as
  122 A:a7c6                           t_init    .( 
  123 A:a7c6  08                                 php 
  124 A:a7c7  78                                 sei 

  126 A:a7c8  a9 ff                              lda #<-1
  127 A:a7ca  8f ff 00 07                        sta lock

  129 A:a7ce  20 00 10                           jsr driver_init

  131 A:a7d1  b0 03                              bcs locked
  132 A:a7d3  28                                 plp 
  133 A:a7d4  18                                 clc 
  134 A:a7d5  60                                 rts 

  136 A:a7d6  28                       locked    plp 
  137 A:a7d7  38                                 sec 
  138 A:a7d8  60                                 rts 
  139 A:a7d9                                     .) 

  141 A:a7d9                           t_uninstall .( 
  142 A:a7d9  78                                 sei 

  144 A:a7da  a9 ff                              lda #<-1
  145 A:a7dc  8f ff 00 07                        sta lock
  146 A:a7e0  60                                 rts 
  147 A:a7e1                                     .) 

  150 A:a7e1                                    ; pause a given number of vertical scree
  151 A:a7e1                                    ; in AC has number of frames (retraces) 
  152 A:a7e1                                     .xs 
  153 A:a7e1                                     .as 
  154 A:a7e1                           t_pause   .( 
  155 A:a7e1  08                                 php 
  156 A:a7e2  a9 00                              lda #MAP_BAS
  157 A:a7e4  8d 02 e8                           sta MAPREG
  158 A:a7e7  58                                 cli 

  160 A:a7e8  aa                                 tax 
  161 A:a7e9  e8                                 inx                    ; full retraces, s
  162 A:a7ea  af fe 00 07              p0        lda VCOUNT
  163 A:a7ee  cf fe 00 07              p1        cmp VCOUNT
  164 A:a7f2  f0 fa                              beq p1
  165 A:a7f4  ca                                 dex 
  166 A:a7f5  d0 f3                              bne p0

  168 A:a7f7  a9 0f                              lda #MAP_USB
  169 A:a7f9  8d 02 e8                           sta MAPREG
  170 A:a7fc  28                                 plp 
  171 A:a7fd  60                                 rts 
  172 A:a7fe                                     .) 

  175 A:a7fe                           t_printc2 .( 
  176 A:a7fe  aa                                 tax                    ; actually overwrites modifiers in X
  177 A:a7ff  08                                 php 
  178 A:a800  78                                 sei 

  180 A:a801  b0 09                              bcs stop

  182 A:a803                                    ;inc $8027

  184 A:a803  a9 00                              lda #MAP_BAS
  185 A:a805  8d 02 e8                           sta MAPREG

  187 A:a808  8a                                 txa 
  188 A:a809  20 ed 94                           jsr key_usb
  189 A:a80c                           stop      
  190 A:a80c  a9 0f                              lda #MAP_USB
  191 A:a80e  8d 02 e8                           sta MAPREG

  193 A:a811  28                                 plp 
  194 A:a812  60                                 rts 
  195 A:a813                                     .) 

  197 A:a813                                    tear_usb=t_uninstall
  198 A:a813                                     .) 

boot_sdcard.a65


    2 A:a813                                     .( 

    4 A:a813                                    tmp=$0780ff           ; last byte in stack on BLK 15

    6 A:a813                                    MAP_SDC=SDCBLK

    8 A:a813                                    SDCPAGE=$c0

   10 A:a813                                    SDCBLK=15           ; bank 7 value for BANK  
   11 A:a813                                    SDCBASE=$4000

   13 A:a813                                    ; -----------------------                                        
   14 A:a813                                    ; copy over SD Card code to RAM                                      
   15 A:a813                                    ; $1c000-$1dfff in flash img                                     
   16 A:a813                                    ; copy to USBBASE                                                

   18 A:a813                                     .xl 
   19 A:a813                           setup_sdcard_xl 
   20 A:a813                                     .( 
   21 A:a813  a9 0f                              lda #MAP_SDC               ; which RAM bank to use for SDCard support
   22 A:a815  8d 02 e8                           sta BANK                ; $e802                                           

   24 A:a818  a9 c0                              lda #SDCPAGE               ; page in flash
   25 A:a81a  a2 00 40                           ldx #SDCBASE               ; start in current bank                          
   26 A:a81d  a0 00 40                           ldy #$4000             ; transfer len                                   
   27 A:a820  20 de 90                           jsr flash2direct2_xl

   29 A:a823  a9 00                              lda #MAP_BAS               ; switch back to bank 0
   30 A:a825  8d 02 e8                           sta BANK

   32 A:a828  60                                 rts 
   33 A:a829                                     .) 

   35 A:a829                                     .) 

boot_irq.a65


    3 A:a829                           irq_install .( 
    4 A:a829  a9 ff                              lda #<-1
    5 A:a82b  8f ff 00 07                        sta lock

    7 A:a82f  a9 46                              lda #<newirq
    8 A:a831  8d ee ff                           sta $ffee              ; 65816 native interrupt vector(!)
    9 A:a834  a9 a8                              lda #>newirq              ; http:
   10 A:a836  8d ef ff                           sta $ffef

   12 A:a839                                    ; once per screen interrupt (60Hz)
   13 A:a839                                    ; 
   14 A:a839                                    ; UltiPet could use VICCY, but uPET does not have this
   15 A:a839                                    ; So, we fall back to using PET VDRIVE input on PIA1 CB1

   27 A:a839  a9 3d                              lda #$3d             ; enable VDRIVE interrupt
   28 A:a83b  8d 13 e8                           sta PIA1+PIA_CRB

   30 A:a83e  60                                 rts 
   31 A:a83f                                     .) 

   33 A:a83f                           irq_uninstall .( 
   34 A:a83f  78                                 sei 

   44 A:a840  a9 3c                              lda #$3c
   45 A:a842  8d 13 e8                           sta PIA1+PIA_CRB

   47 A:a845  60                                 rts 
   48 A:a846                                     .) 

   50 A:a846                                    ; interrupt state saving according to 
   51 A:a846                                    ; http:
   52 A:a846                           newirq    .( 
   53 A:a846                                    ;phb
   54 A:a846                                    ;phd
   55 A:a846  c2 30                              rep #%00110000
   56 A:a848                                     .xl 
   57 A:a848                                     .al 
   58 A:a848  48                                 pha 
   59 A:a849  5a                                 phy 
   60 A:a84a  da                                 phx 

   62 A:a84b  e2 30                              sep #%00110000
   63 A:a84d                                     .xs 
   64 A:a84d                                     .as 

   75 A:a84d  ad 12 e8                           lda PIA1+PIA_PB            ; clear VDRIVE interrupt

   78 A:a850  20 23 95                           jsr checkkbd_xs
   79 A:a853  20 03 95                           jsr key_pet

   81 A:a856  af fe 00 07                        lda VCOUNT                ; vertical screen interrupt
   82 A:a85a  18                                 clc 
   83 A:a85b  69 01                              adc #1
   84 A:a85d  8f fe 00 07                        sta VCOUNT

   86 A:a861  af ff 00 07                        lda lock                ; check lock so we don't get into poll again on pause
   87 A:a865  30 11                              bmi nopoll

   89 A:a867  3a                                 dec 
   90 A:a868  8f ff 00 07                        sta lock                ; lock

   92 A:a86c  20 a2 a7                           jsr usb_poll
   93 A:a86f                                    ;        lda #MAP_USB
   94 A:a86f                                    ;        sta MAPREG
   95 A:a86f                                    ;
   96 A:a86f                                    ;        jsr driver_poll
   97 A:a86f                                    ;
   98 A:a86f                                    ; lda #MAP_BAS
   99 A:a86f                                    ;        sta MAPREG

  101 A:a86f  af ff 00 07                        lda lock
  102 A:a873  1a                                 inc 
  103 A:a874  8f ff 00 07                        sta lock
  104 A:a878                           nopoll    

  110 A:a878  c2 30                              rep #%00110000
  111 A:a87a                                     .xl 
  112 A:a87a                                     .al 
  113 A:a87a  fa                                 plx 
  114 A:a87b  7a                                 ply 
  115 A:a87c  68                                 pla 
  116 A:a87d                                    ;pld
  117 A:a87d                                    ;plb
  118 A:a87d  40                                 rti 
  119 A:a87e                                     .) 

boot.a65


  429 A:a87e                                    ; this is 4k+6p byte max
  430 A:a87e                                    ; 1st 256 byte is ipl

  432 A:a87e  ff fe 8e 00 01 ff 1e ...           .dsb RUNADDR+30*256-*,$ff
  433 A:ae00                                     .) 
