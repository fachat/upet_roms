
; The first block of this is loaded by the IPL from the SPI Flash chip into the uppermost
; 256 bytes of RAM in bank zero, where the CPU boots from.
; This boot block then copies the last 4k of this to $9000 on bank0, and jumps
; to it to execute it.
; 
; Note that this relies on the Flash ROM containing the
; PET ROM images to copy from in this order:
;
; $00000  IPL code (256 byte) - this code
; $00100  Boot code (4k+*256)

#include "viccy.i65"

;VBANK	=$080000

SPICTRL	=$e808
SPIDATA	=$e809
SPIPEEK	=$e80a
SPIOFF	=$07

;VIA	=$e840
;VIA_PCR	=12

VICCY	=$e880

SID1	=$e860
SID2	=$e8e0

SID_VOL	=$18

RUNADDR	=$9000

;shift	=$87ff
;char	=$87fe

;VCTRL   =$e800
;MCTRL   =$e801
BANK    =$e802
;SPEED   =$e803
;R8296   =$fff0

;BOOTCOL	=$15	; dark grey background, light green text
;BOOTCOL	=$1f	; dark grey background, white text
;BOOTCOL	=$50	; black text on light green background
;BOOTCOL	=$05	; black background with light green text

BOOTSTART	=$0100
BOOTLEN		=$1600

	*=$ff00
vreset	.(
#if 0
	; test loop for hardware debugging. E.g. Trigger on A2
	nop
	nop
	nop
	jmp vreset
#else
	; init the CPU
	sei
	cld
	ldx #$ff
	txs

	; switch to native mode
	clc
	xce

	; set ac and index to single byte ...
	sep #%00110000
	; ... and tell the assembler about it
	.as
	.xs

	; prime high byte of AC with zero
	lda #0
	xba

	; copy over boot code to fast RAM (2nd 512k)
	ldx #0
bootl	lda $ff00,x
	sta $08ff00,x
	inx
	bne bootl
	; enable fast RAM
	lda #0
	sta $e801

	; ---------------
	; chip register inits

	; sound on Dual SID chips
	lda #0
	sta SID1+SID_VOL
	sta SID2+SID_VOL

	; VICCY init
	ldy #0
	sty VICCY
vi1	lda vdctab,y
	sta VICCY + 3
	iny
	cpy #40
	bcc vi1

	; viccy palette (2nd half)
	; is set by vdctab
	ldy #VCCY_PAL_BASE
	sty VICCY + 2
	ldy #0
vinit	lda palette+8,y
	sta VICCY + 3
	iny
	cpy #8
	bcc vinit

	; viccy palette (1st half)
	ldy #VCCY_CTRL
	sty VICCY
	lda VICCY+1
	and #$ff-VCCY_CTRL_PALSEL
	sta VICCY+1

	ldy #VCCY_PAL_BASE
	sty VICCY + 2
	ldy #0
vinit2	lda palette,y
	sta VICCY + 3
	iny
	cpy #8
	bcc vinit2

	; ---------------

	; set X/Y registers to 16 bit ...
	rep #%00010000
	; ... and tell the assembler about it
	.xl

spiread
	; -----------------------
	; copy the boot code to RUNADDR
	lda #1
	sta SPICTRL	; enable Flash
	lda #3
	sta SPIDATA	; READ command
	lda #0
	sta SPIDATA	; bits 23-16
	lda #>BOOTSTART
	sta SPIDATA	; bits 15-8
	lda #<BOOTSTART
	sta SPIDATA	; bits 7-0

	lda SPIDATA	; trigger shift in of first byte into SR (value read is still invalid)

	ldx #0
readloop
	lda SPIDATA	; read byte
	sta RUNADDR,x
	inx
	cpx #BOOTLEN
	bne readloop
	
	lda #SPIOFF
	sta SPICTRL	; deselect Flash

	; set ac and index to single byte ...
	sep #%00110000
	; ... and tell the assembler about it
	.as
	.xs

	jmp RUNADDR
#endif

vcop
vbrk
vabort
vnmi
virq
	rti

BGCOL	=0
BRDCOL	=0
FGCOL	=5

&vdctab .byt 0          ; r0 ignored
        .byt 40         ; r1 number of chars per line displayed
        .byt 0,0,0,0    ; r2-5 ignored
        .byt 25         ; r6 char rows displayed
        .byt 0          ; r7 ignored
        .byt 0          ; r8: b7= 80 col mode; b1=interlace, b0=double
        .byt 7          ; r9: rows per char (-1)
        .byt 32         ; r10: cursor start (b0-4, b6/5= mode, 00=solid, 01=off, 1x= blink)
        .byt 7          ; r11: cursor end line
        .byt >$9000     ; r12: start of vid memory high
        .byt <$9000     ; r13: start of vid memory low
        .byt >$0000     ; r14: cursor pos high
        .byt <$0000     ; r15: cursor pos low
        .byt 0,0,0,0    ; r16-r19: ignored
        .byt >$d000     ; r20: start of attribute memory high
        .byt <$d000     ; r21: start of attribute memory low
        .byt 9          ; r22: ignored
        .byt 15         ; r23: character rows displayed
        .byt 0          ; r24: b0-3 scroll down, b4: up/low border ext, b5 blink rate, b6: reverse
        .byt 0          ; r25: b0-3 scroll right, b4: l/r border ext
        .byt BGCOL+16   ; r26: b0-3: bg colour, b4-7: fg colour
        .byt 0          ; r27: address incr
        .byt >$0000     ; r28: char set address high
        .byt 7          ; r29: underline scanline
        .byt 0,0        ; r30/31: rasterline counter low/high
        .byt 4+16+32    ; r32: b0: attr mode, b1: bitmap, b2: extended (cpet compat), 
			;      b4: disp en, b5: pal select, b6: mem map registers, 
			;      b7: upet compat
        .byt $0f        ; r33: b0-3: bg colour 1, b4-7: bg colour 2
        .byt BRDCOL     ; r34: border colour (b0-3)
        .byt 0          ; r35: irq control
        .byt 127        ; r36: irq status (clear all sources)
        .byt 0          ; r37: v/h sync status (VDC)
        .byt 21         ; r38 (was r44): horizontal position (chars)
        .byt 81		; r39 (was r45): vertical position (rasterlines)

palette
	;-- with a 6 bit colour palette the relevant bits 
	;-- are RRxGGxBB 
	;-- primary palette
	.byt %00000000	;     -- "0000" - "00/00/00" black
	.byt %01001001	;     -- "0001" - "01/01/01" dark grey
	.byt %00000010	;     -- "0010" - "00/00/10" dark blue
	.byt %01001011	;     -- "0011" - "01/01/11" light blue
	;--palette(4) <= "00010000";     -- "0100" - "00/10/00" dark green
	.byt %00001000	;     -- "0100" - "00/10/00" dark green
	.byt %01011001	;     -- "0101" - "01/11/01" light green
	;--palette(5) <= "00011000";     -- "0101" - "01/11/01" light green
	;--palette(6) <= "00010010";     -- "0110" - "00/10/10" dark cyan
	.byt %00001001	;     -- "0110" - "00/10/10" dark cyan
	.byt %01011011	;     -- "0111" - "01/11/11" light cyan
	;--palette(8) <= "10000000";     -- "1000" - "10/00/00" dark red
	.byt %01000000	;     -- "1000" - "10/00/00" dark red
	;--palette(9) <= "11001001";     -- "1001" - "11/01/01" light red
	.byt %11000000	;     -- "1001" - "11/01/01" light red
	;--palette(10) <= "10000010";    -- "1010" - "10/00/10" dark purple
	.byt %01000001	;     -- "1010" - "10/00/10" dark purple
	.byt %11001011	;     -- "1011" - "11/01/11" light purple
	;--palette(12) <= "10010000";    -- "1100" - "10/10/00" brown? dark yellow?
	.byt %01001000	;     -- "1100" - "10/10/00" brown? dark yellow?
	.byt %11011001	;     -- "1101" - "11/11/01" light yellow
	.byt %10010010	;     -- "1110" - "10/10/10" light grey
	.byt %11111111	;     -- "1111" - "11/11/11" white            

        .dsb $fff4-*,$f0

        .word vcop
        .word vbrk
        .word vabort
        .word vnmi
        .word vreset
        .word virq

	.)


