
	.include "boot_opts.i65"

	.(

; opt0	bits are:
;	bit 7: 1=orig editor - inverted copy of EDITOR ROM patch bit
;	bit 6: 1=80 col, 0=40 col
;	bit 5: 1=c64 kbd, 0=pet-N kbd
;	bit 4: 1=8296 memory map, 0= normal
;	bit 3: 1=USB support enabled from keyboard select
;	
; opts1 bits are:
;	bit 7: KERNAL enhancements
;	bit 6: BASIC enhancements
;	bit 5: new EDITOR (sjg)
;	bit 4: enable 65816 monitor
;	bit 3: enable SD-Card support
;	bit 2: SD unit#
;	bit 1: enable serial IEC support
;	bit 0: IEC/IEEE prio
; opts2 bits are:
;	bit 7: enable RS232 port A support
;	bit 6: enable RS232 port B support
;	bit 5: enable USB support (mouse/kbd)
;

ONCHAR	=81
OFFCHAR	=87

&&do_options_init_xl .(
	; switches to .xs
	sep #%00010000
	.xs

	; detect hardware, set masks
	jsr detect_xs

	; switches to .xs
	rep #%00010000
	.xl
	rts
	.)

&&do_options_xl .(
	; clear the screen
	jsr clrscreen_xl

	; display the (empty) options menue
	jsr opttext_xl

	; switches to .xs
	sep #%00010000
	.xs

	; display the current options values
	jsr set_opts_xs

doloop	lda #0
	sta opt

	; wait for keyboard input (from interrupt)
chkloop	lda opt
	beq chkloop

	; handle keyboard interrupt
	jsr do_opt_xs
	bcc doloop

	rep #%00010000
	.xl

	pha
	jsr clrscreen_xl
	pla
	rts
	.)

	; ==========================================================
	; detect hardware and handle option masks

	.xs
	; ----------------------------
	; detect logic
detect_xs .(
	;-- detect UART 1 at $e818
; to detect a UART 16550 

UART_RXTX       =0               ; DLAB=0 
UART_IER        =1               ; DLAB=0 
UART_DLL        =0               ; divisor latch low, DLAB=1 
UART_DLH        =1               ; divisor latch high, DLAB=1 
UART_IIR        =2               ; Irq Ident. Reg., read only 
UART_FCR        =2               ; FIFO Ctrl Reg., write only 
UART_LCR        =3               ; Line Ctrl Reg 
UART_MCR        =4               ; Modem Ctrl Reg 
UART_LSR        =5               ; Line Status Reg 
UART_MSR        =6               ; Modem Status Reg 
UART_SCR        =7               ; 'scratchpad', i.e. unused 

	.(
UART	=$e818
        ldy UART+UART_MCR
        lda #$10
        sta UART+UART_MCR
        lda UART+UART_MSR
        and #$f0
        bne nodev
        lda #$1f
        sta UART+UART_MCR
        lda UART+UART_MSR
        and #$f0
        cmp #$f0
        beq dev
nodev	sty UART+UART_MCR	; restore potential PIA register
	ldy #255-OPT2_SERA
	jsr clrmask2
dev	.)
	.(
UART	=$e828
        ldy UART+UART_MCR
        lda #$10
        sta UART+UART_MCR
        lda UART+UART_MSR
        and #$f0
        bne nodev
        lda #$1f
        sta UART+UART_MCR
        lda UART+UART_MSR
        and #$f0
        cmp #$f0
        beq dev
nodev	sty UART+UART_MCR	; restore potential PIA register
	ldy #255-OPT2_SERB
	jsr clrmask2
dev	.)
	; --
	; detect 2nd VIA
	.(
VIA2	=$e850
	lda VIA2+VIA_PCR
	and #%00010001
	sta VIA2+VIA_PCR
	cmp VIA2+VIA_PCR
	bne nodev
	ora #%01100110
	sta VIA2+VIA_PCR
	cmp VIA2+VIA_PCR
	beq dev
nodev	ldy #255-OPT1_SIEC
	jsr clrmask
	ldy #255-OPT2_UNITOFF_M
	jsr clrmask2
dev	.)
	rts

clrmask	ldx #0
sm1	tya
	and opts_mask,x
	sta opts_mask,x
	inx
	cpx #OPT_MAX_X_I
	bcc sm1
	rts
clrmask2
	ldx #0
sm2	tya
	and opts_mask2,x
	sta opts_mask2,x
	inx
	cpx #OPT_MAX_X_I
	bcc sm2
	rts
	.)

	; ==========================================================
	; screen routines
	.(

	.xl

; screen position starts line 9, position 12
; distance every 2 chars
start	=$8000+40*9+13
pos	=2

&opttext_xl .(
	ldx #0
outl	lda text,x
	beq endt
	and #$bf	; to PET Screencode
	sta $8000+2*40,x
	inx
	bne outl
endt	
	rts

text	.asc "           MICRO-/ULTI-PET              "
	.asc "              OPTIONS                   "
	.asc "                                        "
	.asc "CRSR TO SELECT, SPC TO CHANGE, X TO EXIT"
	.asc "                                        "
	.asc "            <--NORMAL---> <--SHIFTED--> "
	.asc "             1 2 4 6 8 9   1 2 4 6 8 9  "
	.asc "SPEED                                   "
	.asc "KERNAL                                  "
	.asc "BASIC                                   "
	.asc "EDITOR                                  "
	.asc "MONITOR                                 "
        .asc "SD-CARD                                 "
        .asc "SD UNIT                                 "
	.asc "SER IEC                                 "
	.asc "UNIT +10                                "
	.asc "RS232 A                                 "
	.asc "RS232 B                                 "
        .asc "USB HID                                 "
	.asc 0
	.)

	.xs

	; ----------------------------------------------------------
	; display all options

&set_opts_xs .(

	ldx #0
	stx x
	ldy #0
	sty y
rowloop	
	jsr getpos
	ldy y
	ldx x
	cpy #8
	bcs upper
	lda opts_mask,x
	and pow2,y
	bra rl1
upper	lda opts_mask2,x
	and pow2-8,y
rl1	beq nextopt

	cpy #OPT1_SPEED_I
	beq speed
	cpy #OPT1_SDUNIT_I
	beq unit
	cpy #OPT2_UNITOFF_I
	beq prio
	bcs uppr

	lda opts_vals,x
	and pow2,y
	jsr showopt
	bra nextopt
uppr	
	lda opts_vals2,x
	and pow2-8,y
	jsr showopt
	bra nextopt
unit
	lda unit_vals,x
	jsr showunit
	bra nextopt

prio	lda opts_vals2,x
	and pow2-8,y
	jsr showprio
	bra nextopt

speed	lda unit_vals,x
	jsr showspeed
	; bra nextopt	; fallthrough

nextopt	inc x
	ldx x
	cpx #OPT_MAX_X_I
	bcc rowloop
	ldx #0
	stx x
	inc y
	ldy y
	cpy #OPT_MAX_Y_I
	bcc rowloop
	ldy #0
	sty y
	jmp act
	.)

&showunit .(
	and #3
	ora #8
	ldy #0
	pha
	cmp #10
	bcs tenplus
	lda #" "
	sta (pos),y
	iny
	pla
	bra tp
tenplus	lda #"1"
	sta (pos),y
	iny
	pla
	sbc #10
tp	ora #$30
	sta (pos),y
	rts
	.)

&showspeed .(
	asl
	bcs is4orM
	asl
	bcs is2
	lda #"1"
	.byt $2c
is2	lda #"2"
	.byt $2c
is4	lda #"4"
	.byt $2c
isM	lda #"M"
	ldy #1
	sta (pos),y
	rts

is4orM	asl
	bcc is4
	bcs isM
	.)

&showprio .(
	beq prioser
	lda #"P"
	.byt $2c
prioser	lda #"S"
	and #$bf
	ldy #1
	sta (pos),y
	rts
	.)

	; set pos screen pointer to x/y
&getpos	.(
	lda #0
	sta pos+1
	lda y
	asl
	asl	
	asl	; by 8
	sta pos
	asl pos
	rol pos+1
	asl pos
	rol pos+1 ; by 32
	clc
	adc pos
	sta pos
	lda #0
	adc pos+1
	sta pos+1
	lda x
	cmp #6
	bcc @1
	adc #0
@1	asl
	adc pos
	sta pos
	lda #0
	adc pos+1
	sta pos+1
	lda #<start-1
	clc
	adc pos
	sta pos
	lda #>start-1
	adc pos+1
	sta pos+1
	rts
	.)

	; select an option
&act	.(
	jsr getpos
	ldy #1
al	lda (pos),y
	ora #128
	sta (pos),y
	dey
	bpl al
	rts
	.)

	; de-select an option
deact	.(
	jsr getpos
	ldy #1
dl	lda (pos),y
	and #127
	sta (pos),y
	dey
	bpl dl
	rts
	.)

	; ----------------------------------------------------------
	; handle keyboard input on options menu

&do_opt_xs .(
	pha
	jsr deact
	pla
	cmp #TC_CRGT
	beq right
	cmp #TC_CLFT
	beq left
	cmp #TC_CUP
	beq up
	cmp #TC_CDWN
	beq down2
	cmp #" "
	beq action2
	cmp #"x"
	beq out
endo	jsr act
	clc
out	rts

	; --------------------------
	; handle cursor actions

down2	jmp down
action2	jmp action

left 	ldx x
	beq endo
	ldy y
	cpy #8
	bcs nxleft2
nxleft	dex
	lda opts_mask,x
	and pow2,y
	bne goleft
	txa
	bne nxleft
	beq endo
goleft	stx x
	bne endo
nxleft2	dex
	lda opts_mask2,x
	and pow2-8,y
	bne goleft
	txa
	bne nxleft2
	beq endo

right 	ldx x
nxrght	cpx #OPT_MAX_X_I-1
	bcs endo
	inx
	ldy y
	cpy #8
	bcs nxrght2
	lda opts_mask,x
	and pow2,y
	beq nxrght
gorght	stx x
	bne endo
nxrght2	lda opts_mask2,x
	and pow2-8,y
	bne gorght
	beq nxrght

up	ldy y
	beq endo
nxup	dey
	ldx x
	cpy #8
	bcs nxup2
	lda opts_mask,x
	and pow2,y
	bne goup
nxup2a	tya
	bne nxup
	beq endo
nxup2	lda opts_mask2,x
	and pow2-8,y
	beq nxup2a
goup	sty y
	bne endo2

down	ldy y
nxdown	cpy #OPT_MAX_Y_I-1
	bcs endo2
	ldx x
	iny
	cpy #8
	bcs nxd2
	lda opts_mask,x
	and pow2,y
	beq nxdown
godo	sty y
endo2	jmp endo
nxd2	lda opts_mask2,x
	and pow2-8,y
	bne godo
	beq nxdown

	; --------------------------
	; handle actual change

action	ldx x
	ldy y
	cpy #OPT1_SPEED_I
	beq actspeed
	cpy #OPT1_SDUNIT_I
	beq actunit
	cpy #OPT2_UNITOFF_I
	beq actprio
	.assert OPT2_UNITOFF_I == 8, "optimized compare"
	bcs act2
	lda opts_vals,x
	eor pow2,y
	sta opts_vals,x
	and pow2,y
	bra act2b
act2	lda opts_vals2,x
	eor pow2-8,y
	sta opts_vals2,x
	and pow2-8,y
act2b	jsr showopt
	jmp act
&showopt
	beq notset
	lda #ONCHAR
	.byt $2c
notset	lda #OFFCHAR
	ldy #1
	sta (pos),y
	rts

actspeed .(
	lda unit_vals,x
	clc
	adc #64
	sta unit_vals,x
	jsr showspeed
	jmp endo
	.)

actunit .(
	lda unit_vals,x
	and #3
	inc
	cmp #4
	bcc a1
	lda #0
a1	pha
	lda #%11111100
	and unit_vals,x
	sta unit_vals,x
	pla
	ora unit_vals,x
	sta unit_vals,x
	jsr showunit
	jmp endo
	.)

	.assert OPT2_UNITOFF_I > 7, "lookup tables"
actprio
	lda opts_vals2,x
	eor pow2-8,y
	sta opts_vals2,x
	and pow2-8,y
	jsr showprio
	jmp endo
	.)

	.xl

        ; ----------------------------
        ; In: AC has key in ASCII
        ;
        ; out:  c=0:    no option
        ;       c=1:    result is in AC:
	;
	; stores selected options in 
	; opt0, opt1, opt2, and optu
        ;
        .xl
&&conv_char2opt_xl .(
        ldx #opts-chars-1
l0      cmp chars,x
        beq found       ; implicit sec
        dex
        bpl l0
        clc
        rts
found   cpx #MAX_KEYS*2
	bcc notusb
	txa
	sbc #MAX_KEYS
	tax
notusb
	lda optkbd
        and #%00101000  ; filter usb and c64 kbd flags
        ora opts,x
	sta opt0

	; copy inverted editor ROM bit for easier EDIT rom selection
	lda opts_vals,x
	and #OPT1_EDITOR
	.assert OPT1_EDITOR == 16, "bit shift"
	asl
	asl
	asl
	eor #%10000000
	ora opt0
	sta opt0

	lda opts_vals,x
	and opts_mask,x
	sta opt1

	lda opts_vals2,x
	and opts_mask2,x
	sta opt2

	lda unit_vals,x
	sta optu
        sec
        rts
	.)

MAX_KEYS =6

chars   .byt "124689"
        ; shifted keys from pet / c64 kbd
        .byt "1"+128,"2"+128,"4"+128,"6"+128,"8"+128, "9"+128
        ; shifted keys from USB
        .byt "!",$22, "$", "^","*","("
        .byt "o" 		; options menu
opts
        .byt %00000001          ; patched basic1
        .byt %00000010          ; patched basic2
        .byt %00000011          ; patched 40 col
        .byt %01000011          ; patched 8296
        .byt %01000011          ; patched 80 col

        .byt %01000011          ; patched 80 col

        .byt %00000001          ; unpatched basic1
        .byt %00000010          ; unpatched basic2
        .byt %00000011          ; unpatched 40 col
        .byt %01010011          ; unpatched 8296
        .byt %01000011          ; unpatched 80 col

        .byt %00000100          ; option menu

	; temp
x	.byt 0
y	.byt 0
row	.word 0

pow2	.byt %10000000
	.byt %01000000
	.byt %00100000
	.byt %00010000
	.byt %00001000
	.byt %00000100
	.byt %00000010
	.byt %00000001

	; bits are:
	
&opts_mask
	.byt %11000000		; 1
	.byt %10000000		; 2
	.byt %11110111		; 4
	.byt %11110111		; 6
	.byt %11110111		; 8

	.byt %00000000		; 9

	.byt %11000000		; 1
	.byt %10000000		; 2
	.byt %11110111		; 4
	.byt %11110111		; 6
	.byt %11110111		; 8

	.byt %00000000		; 9

&opts_mask2
	.byt %00000000		; 1
	.byt %00000000		; 2
	.byt %11110000		; 4
	.byt %11110000		; 6
	.byt %11110000		; 8

	.byt %00000000		; 9

	.byt %00000000		; 1
	.byt %00000000		; 2
	.byt %11110000		; 4
	.byt %11110000		; 6
	.byt %11110000		; 8

	.byt %00000000		; 9

opts_vals
	.byt %11000000		; 1
	.byt %10000000		; 2
	.byt %11111111		; 4
	.byt %11111111		; 6
	.byt %11111111		; 8

	.byt %11111111		; 9

	.byt %00000000		; 1
	.byt %00000000		; 2
	.byt %00000000		; 4
	.byt %00000000		; 6
	.byt %00000000		; 8

	.byt %00000000		; 9

opts_vals2
	.byt %00000000		; 1
	.byt %00000000		; 2
	.byt %00100000		; 4
	.byt %00100000		; 6
	.byt %00100000		; 8

	.byt %00100000		; 9

	.byt %00000000		; 1
	.byt %00000000		; 2
	.byt %00000000		; 4
	.byt %00000000		; 6
	.byt %00000000		; 8

	.byt %00000000		; 9

unit_vals
	.byt %00000000		; 1 - 1 MHz, unit 8
	.byt %00000000		; 2
	.byt %00000000		; 4
	.byt %00000000		; 6
	.byt %00000000		; 8
	.byt %00000000		; 9

	.byt %00000000		; 1
	.byt %00000000		; 2
	.byt %00000000		; 4
	.byt %00000000		; 6
	.byt %00000000		; 8
	.byt %00000000		; 9
	.)
	.)

